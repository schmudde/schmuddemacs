#+TITLE: Schmuddemacs
#+AUTHOR: David Schmudde
#+LANGUAGE: en
#+STARTUP: align indent fold

Welcome to Schmuddemacs!

My GNU Emacs configuration file is written to help me remember all the small decisions I made along the way and as a guide for any souls who might stumble upon this page.

Software updates will inevitably break existing configurations. I have often revisited a relevant snippet of Emacs Lisp code with a pithy comment and felt lost. The /Literate Programming/ style offers more context. After all, code was written primarily for humans to read, including all future Schmuddes, and only incidentally for machines to interpret.

Code evaluation is provided by ~org-babel~, which provides a method for extracting and evaluating Emacs Lisp expressions inside an org-mode file.

This is currently loaded by my ~init.el~ using ~(org-babel-load-file (concat user-emacs-directory "config.org"))~. This README is a symlink to ~config.org~.

The move to Org Mode is currently a work in progress!

[[under-construction.gif]]

* Package Overview

Come winter, having a snow in my Emacs is an absolute necessity. ~snow.el~ is available in [[https://melpa.org/#/snow][MELPA]] or on [[https://github.com/alphapapa/snow.el][GitHub]]. Download the file, ~curl -O https://raw.githubusercontent.com/alphapapa/snow.el/master/snow.el~, open it in a buffer, ~eval-buffer~, and ~M-x snow RET~.

** Completion Frameworks

I'm looking for something that is based on [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Icomplete.html][Icomplete]], which offers most critical completion features as of Emacs 27. I switched from [[https://www.masteringemacs.org/article/introduction-to-ido-mode][Interactively DO Things]] + ~ido-everywhere~; I don't use Icomplete's FIDO (IDO compatibility) because I never needed any IDO quirks. I also considered Helm, which offers packages like [[https://github.com/bbatsov/helm-projectile][Helm Projectile]]. But using Projectile in concert with Icomplete is trivial since Icomplete is built-in and ubiquitious.

I am now using VERTical Interactive COmpletion (vertico) as an interface to Icomplete. This works anywhere Icomplete does, including Projectile. Furthermore, ~(savehist-mode 1)~ is a built-in command that will save the most used commands in the minibuffer prompt. This replaces IDO + [[https://github.com/nonsequitur/smex][smex]].

My current minibuffer enhancements

- Savehist mode
- Vertico
- Marginalia
- ~completion-styles~
    - Are the text-matching algorithm (e.g. ~orderless~). Based on the /completion category/ metadata, it can chose a style for a specific file type.
    - They hook into the underlying completion infrastructure to provide ~orderless~ completion
    - ~orderless~ accepts SPC but ~basic~ and ~partial-completion~ do not. ∴ ~wikidata_test.clj~ can be found when typing ~tes SPC~ even if the directory includes ~test.clj~.

#+begin_src emacs-lisp
    (savehist-mode 1)

    (use-package vertico
      :ensure t
      :config (vertico-mode 1)
      ;; This works with `file-name-shadow-mode' enabled.  When you are in
      ;; a sub-directory and use, say, `find-file' to go to your home '~/'
      ;; or root '/' directory, Vertico will clear the old path to keep
      ;; only your current input.
      (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy))

    ;;(use-package marginalia
    ;;  :ensure t
    ;;  :config (marginalia-mode 1))

    (setq completion-styles '(orderless basic))
    (setq completion-category-overrides
          '((file (styles . (basic partial-completion orderless)))))
#+end_src

I experimented with recursive minibuffers, but so far haven't needed them. So I'm not adding them to the ~emacs-lisp~ evaluation.

#+begin_src
  (setq enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode 1)
#+end_src

*** [[https://github.com/bbatsov/projectile][Projectile]]                                                  :installed:

Navigate between files in a project.

- ~C-c p l~: open a file to add a project
- ~C-c p p~: switch to another project

#+begin_src emacs-lisp
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

*** Buffer Completion vs. Pop Ups

Corfu is my current buffer completion enhancement. I use terminal mode, so ~(global-corfu-mode 1)~ doesn't cut it. However, the following setting will bring up completions in the minibuffer:

#+begin_src emacs-lisp
  (setq completion-in-region-function #'consult-completion-in-region)
#+end_src

** Note Management

*** [[https://jblevins.org/projects/deft/][deft]]                                                        :installed:

How many research files do I have? List (single-column: ~-1~, hide-control-chars: ~-q~) and count the new lines.

#+begin_src shell
ls -1q ~/.deft | wc -l
#+end_src

#+RESULTS:
: 158

#+begin_src emacs-lisp
(global-set-key (kbd "<f8>") 'deft)
#+end_src

Set ~deft-extensions~, ~deft-recursive~, and ~deft-directory~ in ~M-x customize-group~: ~deft~. [[https://jonathanchu.is/posts/setting-up-deft-mode-in-emacs-with-org-mode/][Note]]: I set ~deft-auto-save-interval~ to 0 (default 1.0, it saves every second). I have a ~before-save-hook~ that deletes trailing whitespace. This can remove whitespace while in the middle of typing. Annoying.

~deft-incremental-search~

- ~t~ (default): use incremental string search when non-nil. During incremental string search, substrings separated by spaces are treated as subfilters, each of which must match a file. They need not be adjacent and may appear in any order.
- ~nil~: regexp search. During regexp search, the entire filter string is interpreted as a single regular expression.
    - ~The\s-KLF~ Will find /The KLF/.

*** [[https://protesilaos.com/codelog/2022-06-18-denote-demo/][denote]]                                                      :installed:

Denote is a simple note-taking tool for Emacs. It is based on the idea that notes should follow a predictable and descriptive file-naming scheme. The file name must offer a clear indication of what the note is about, without reference to any other metadata. Denote basically streamlines the creation of such files while providing facilities to link between them.

#+begin_src emacs-lisp
  ;; Uses the `denote-dired-directories' which by default includes just the `denote-directory'.
  (require 'denote)
  (setq denote-dired-directories (list denote-directory))
  (add-hook 'dired-mode-hook 'denote-dired-mode-in-directories)
  (setq denote-dired-directories-include-subdirectories t)
  (setq denote-rename-buffer-format "[D] %t")
  (denote-rename-buffer-mode 1)
  (setq denote-infer-keywords nil)
#+end_src

~remove-hook~ → ~denote--signature-history~ to clean up signature history

~denote-infer-keywords~ sets a controlled vocabulary for keywords/filetags (meaning they are predefined and do not proliferate). Keywords set in *Customize Group: Denote*.

*** [[https://github.com/nobiot/org-transclusion][org-transclusion]]                                       :installed:

#+begin_src emacs-lisp
  (use-package org-transclusion
    :hook (org-mode . org-transclusion-mode))
#+end_src

Watch out!! ~org-transclusion-add~ → ~org-transclusion-deactivate~ → ~org-transclusion-activate~ → ~org-transclusion-add~

**** Simple Example

1. Insert link

[[/home/schmudde/.emacs.d/transclude-example.org::quote-example][transclusion example]]

Note that it has the ~#+name~ reflected in the hyperlink.

2. Create the Transclusion

Prefix ~#+transclude:~, move the cursor over the text, ~M-x org-transclusion-add~

#+transclude: [[/home/schmudde/.emacs.d/transclude-example.org::quote-example][transclusion example]]

**** Specifics Instructions

- The minor mode is automatically turned on locally for your current buffer through one of these commands. All it does is to call ~org-transclusion-activate~ to activate hooks and some other variables.
    - ~org-transclusion~ is a local minor mode intended to be just a convenient wrapper to let you easily toggle between ‘activate’ and ‘deactivate’.
    - ~org-transclusion-add~ to add transclusions in your current buffer.
- Specify a range of lines to transclude: ~#+transclude: [[file:../../test/test.txt]] :lines 3-5~

- ~3-5~: lines from 3 to 5, both lines inclusive.
- ~10-10~, meaning line 10 only
- You can combine ‘:lines’ with ‘:src’ to transclude only a certain range of source files: ~#+transclude: [[file:../../test/python-1.py::id-1234]] :lines 1-4 :src python~ (the four lines of the source file from the line that contains string “id-1234”)
- For Org’s file links (using ~org-transclusion-make-from-link~), you can use [[https://orgmode.org/manual/Search-Options.html][search options]] w/ ~::~. When a search finds a line that includes the string, the Org-transclude counts it as the starting line 1 for the ‘:lines’ property: ~#+transclude: [[file:../../test/test.txt::Transcendental Ontology]] :lines 1-1~ (only the single line that contains the line found by the search option for text string “Transcendental Ontology”)

*** TODO Querying Org Files                                   :considering:

- https://github.com/alphapapa/org-ql
- https://github.com/alphapapa/org-rifle

*** TODO [[https://www.eliasstorms.net/zetteldeft/zetteldeft.html][Zettledeft]]                                           :considering:

Why Zetteldeft links?

A question often asked, and rightfully so, is why zetteldeft doesn’t use any of the built-in emacs types of links, such as provided by org-mode, for example.

- Zetteldeft is not limited to Org-mode, but can be used in and from any mode.
- Org-mode links depend on filenames and might break when files are moved or the filename changes.
- I want to prevent lock in as much as possible. Many people use a Markdown-based system, and you could perfectly use Zetteldeft together with other applications that make Markdown notes (theoretically at least – I haven’t tested this myself)

*** TODO zk.el                                                :considering:

- zk-index and zk-desktop, interfaces for the zk note-taking package: https://www.youtube.com/watch?v=7qNT87dphiA
- https://github.com/localauthor/zk
- [[https://melpa.org/#/zk][MELPA]], [[https://www.youtube.com/watch?v=BixlUK4QTNk][Video]]

** Productivity

*** [[https://git.zx2c4.com/password-store/tree/contrib/emacs][password-store]]                                                :installed:

Works with the [[https://www.passwordstore.org/][pass]] Linux password manager, which must be installed for this to work.

Examples:

#+BEGIN_SRC
M-x password-store-insert
Password entry: foo-account
Password: ........
Confirm password: ........
#+END_SRC

Copied password for foo-account to the kill ring. Will clear in 45 seconds.

#+BEGIN_SRC
M-x password-store-copy
Password entry: services/github
#+END_SRC

List passwords on the command line using ~pass~ and then use ~password-store-edit~ -> ~muw/schmudde@yorba.co~ to update the password.

*** Calendar with [[https://github.com/kiwanami/emacs-calfw][Calfw]]                                           :installed:

#+BEGIN_SRC emacs-lisp
  ;; (require 'calfw-ical)
  ;; IndieWeb @ https://events.indieweb.org/
  ;; (cfw:open-ical-calendar "https://events.indieweb.org/ics/events.ics")

  ;; (cfw:open-ical-calendar "https://dweb.events/feed.ics")
#+END_SRC

* Starting Emacs and Emacs Server

I like to have a single instance of Emacs running and open up multiple clients. The following tips are courtesy of [[https://github.com/susam/emfy#emacs-server][Susam]].

#+begin_src emacs-lisp
(require 'server)

(unless (server-running-p)
  (server-start))
#+end_src

~server-running-p~ returns ~t~ or ~nil~ depending on the state of the server; it needs the ~server~ package.

- ~emacsclient foo.txt bar.txt~: blocks the terminal until finished editing. When we are done editing a file, we must type C-x # to tell Emacs to switch to the next file.
- ~emacsclient -n foo.txt bar.txt~: opens files in the existing Emacs instance but does not wait for us to finish editing.

The ~em~ bash script modifies [[https://github.com/susam/emfy#emacs-server][Susam]]'s original.

If ~em~ is run without arguments, try to start an ~emacsclient~. The bash script will end here if there is an Emacs process with a server running.

#+begin_src bash :results silent :tangle em
# Do not edit this file. It is tangled from
# Link on your $PATH. In my case it's
# ln -s /home/schmudde/.local/bin
#!/bin/sh
if [ "$#" -eq 0 ]
then
    echo "Starting an Emacs client ..." >&2
    if emacsclient -nw 2> /dev/null
    then
        echo "Opened $@ in Emacs client" >&2
        emacsclient -nw
    else
        echo "Starting new Emacs process ..." >&2
        emacs -nw
    fi
fi
#+end_src

If no Emacs process exists, ~emacsclient~ will not run. The next test conditions are considered:

1. If there are no arguments to ~em~ start an Emacs process.
2. If there are arguments to ~em~, try starting an ~emacsclient~ with those arguments.
3. If there are arguments to ~em~ and no Emacs process, start an Emacs process with those arguments.

#+begin_src bash :results silent
#!/bin/sh
if [ "$#" -eq 0 ]
then
    echo "Starting new Emacs process ..." >&2
    emacs -nw
elif emacsclient -nw "$@" 2> /dev/null
then
    echo "Opened $@ in Emacs server" >&2
else
    echo "Opening $@ in a new Emacs process ..." >&2
    emacs -nw "$@"
fi
#+end_src

* Interface Improvements

I use the Emacs Web Wowser quite a bit, so I want to customize the search engine. When in EWW: ~M-x customize-mode~ &rarr; /Eww Search Prefix/ &rarr; ~https://html.duckduckgo.com/html?q=~

#+begin_src bash
whereis firefox
#+end_src

#+RESULTS:
: firefox: /usr/bin/firefox /usr/lib/firefox

"/usr/share/applications/firefox.desktop"

I like having the day, date, and time displayed in my modeline.

#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t)
(display-time-mode 1)
#+END_SRC

For the time being, simply use one of the default color themes. Can use ~M+x customize-theme~ to change themes.

#+BEGIN_SRC emacs-lisp
(load-theme 'wheatgrass)
#+END_SRC

I like to use the ~menu-bar-mode~, ~menu-bar-open~ (~F10~) when I forget commands. But the default colors don't really work. They are in two different places:

1. ~M-x customize-face RET menu RET~ to set the menu bar itself
2. Use TTY settings to set the colors of the pull downs themselves:
    - With ~customize-face~: ~tty-menu-disabled-face~, ~tty-menu-enabled-face~, ~tty-menu-selected-face~
    - Or in Lisp: ~(set-face-attribute 'tty-menu-enabled-face  nil :background "black" :foreground "white")~

** Keybindings

I don't use ~suspend-frame~. And it's easy to invoke by executed extended command. It's bound to the valuable ~C-z~.

#+begin_src emacs-lisp :tangle no
(describe-key (kbd "C-z"))
#+end_src

So I want to unbind it and then use it for something better. Fundamentally ~global-set-key~, ~local-set-key~, etc... call ~define-key~, so I'm going to use that for most of my keybindings. It

#+begin_src emacs-lisp :results none
  (define-key global-map (kbd "C-z") nil) ; Unbind C-z

  (defvar my-keymap ; declare keymap and make some basic bindings
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "r") 'revert-buffer)
      (define-key map (kbd "s") 'eww-search-words)
      (define-key map (kbd "+") 'quick-calc)
      (define-key map (kbd "c") 'org-capture)
      (define-key map (kbd "d") 'dictionary-search)
      (define-key map (kbd "y") 'yas-expand)
      map)
    "Schmudde's personal keymap")

  (define-key global-map (kbd "C-z") my-keymap) ; Bind C-z within my-keymap

  (define-key global-map (kbd "C-x C-n") 'next-buffer)
  (define-key global-map (kbd "C-x C-p") 'previous-buffer)
#+end_src

** Text Expansion
n
/[[https://www.masteringemacs.org/article/text-expansion-hippie-expand][Hippie Expand]]/ > /Dynamic Abbrev/

#+begin_src emacs-lisp
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src

~M-/~ expands the things it has seen in:

- File Names and Paths in any buffer
- A repeated line from earlier
- Lisp lists
- Switches/keywords in ~eshell~/~shell~
- Stuff from the Kill Ring

** [[https://depp.brause.cc/nov.el/][nov.el]]                                                      :considering:
** Elfeed                                                        :installed:

- Filter by feed name ~=ScienceAlert~
- Filter by tag/keyword: ~+irl~

#+begin_src emacs-lisp
  (load (locate-user-emacs-file "feeds.el") :no-error)
  (setq elfeed-search-filter "@2-weeks-ago +unread")

  (use-package elfeed
    :ensure t
    :bind (:map elfeed-search-mode-map
                ("g" . elfeed-update)))
#+end_src

** [[https://github.com/justbur/emacs-which-key][which-key]]                                                     :installed:

~C-x~ and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow ~C-x~ (or as many as space allows given your settings). This includes prefixes like ~C-x 8~ which are shown in a different face.

#+begin_src emacs-lisp
(which-key-mode)
(which-key-setup-side-window-right)
#+end_src

* Org Mode
** Org Mode

#+begin_src emacs-lisp
  (use-package markdown-mode)

  (defun my-markdown-insert-link ()
    (interactive)
    (let ((org-stored-link (bound-and-true-p org-stored-links)))
      (call-interactively
       (cond
        ((and org-stored-link
              kill-ring
              (string-match-p browse-url-button-regexp (car kill-ring)))
         (intern ;; insert into (or read from like ~intern-soft~) to the object array
          (completing-read "Pick function: "
                           '(org-insert-link-global
                             markdown-insert-link)
                           nil :require-match)))
        (org-stored-link #'org-insert-link-global)
        (t #'markdown-insert-link)))))

  (define-key markdown-mode-map [remap markdown-insert-link] 'my-markdown-insert-link)

  ;; Like `markdown-regex-link-reference' but with an extra closing
  ;; square bracket (group 8).
  (setq my-markdown-org-link-regexp
        (concat "\\(?1:!\\)?"
                "\\(?2:\\[\\)"
                "\\(?3:[^]^][^]]*\\|\\)"
                "\\(?4:\\]\\)"
                "\\(?5:\\[\\)"
                "\\(?6:[^]]*?\\)"
                "\\(?7:\\]\\)"
                "\\(?8:\\]\\)"))

  (defun my-markdown-open-link ()
    (interactive)
    ;; The `thing-at-point-looking-at' is like what we find in
    ;; `markdown-inside-link-p'.
    ;;
    ;; The `or' has two possibilities.  The first is an Org-style link
    ;; like [[ref][anchor]].  The second is an Org link without an
    ;; anchor tag, which is the same as Markdown "wiki" link: [[ref]].
    (if (or (thing-at-point-looking-at my-markdown-org-link-regexp)
            (thing-at-point-looking-at markdown-regex-wiki-link))
        (call-interactively 'org-open-at-point-global)
      (call-interactively 'markdown-follow-thing-at-point)))

  (define-key markdown-mode-map [remap markdown-follow-thing-at-point] 'my-markdown-open-link)
#+end_src

*** TODO Update to ~global-map~

The issue is ~C-c l~ is a prefix for lsp-mode, which is why I haven't made this global already.

#+begin_src emacs-lisp
  (define-key text-mode-map (kbd "C-c l") 'org-store-link)
#+end_src

** Org Agenda

[[/home/schmudde/Dropbox/notes/emacs-modes.org::72][org-capture shortcuts]]

#+begin_src emacs-lisp
org-todo-keywords
#+end_src

#+RESULTS:
| sequence | TODO | DOING | DONE |

#+begin_src emacs-lisp
(global-set-key (kbd "<f3>") 'org-agenda)
#+end_src

#+begin_src emacs-lisp
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-log-redeadline 'time)
  (setq org-log-reschedule 'time)
#+end_src

#+begin_src emacs-lisp
;; The tasks.org here is relative to the `org-directory'.
(setq org-capture-templates
             `(("e" "Email note" entry
               (file+headline "../org/inbox.org" "Unprocessed")
               ,(concat "* TODO %:subject :mail:\n"
                        ":PROPERTIES:\n"
                        ":CAPTURED: %U\n"
                        ":END:\n\n"
                        "%a\n%i%?")
               :empty-lines-after 1)))
#+end_src

#+begin_src emacs-lisp
  (defun drs-org-done-today ()
    (let (headings)
      (goto-char (point-min))
      (org-map-entries
       (lambda ()
         (when-let ((closed-date (org-entry-get (point) "CLOSED"))
                    ((string-match-p (format-time-string "%F") closed-date)))
           (push (org-get-heading nil nil nil :no-comment) headings))))
      (nreverse headings)))

  (defun drs-org-done-today-display ()
    (interactive)
    (if-let ((headings (drs-org-done-today)))
        (with-current-buffer (pop-to-buffer "*drs-org-done-today*")
          (erase-buffer)
          (org-mode)
          (insert (format "* %s\n" (format-time-string "%F, %A")))
          (dolist (heading headings)
            (insert (format "** %s\n" heading))))
      (message "Nothing done today 😉")))
#+end_src

*** [[https://github.com/alphapapa/org-ql][org-ql]]: query org-mode files                              :considering:
** [[https://github.com/marcinkoziej/org-pomodoro][Pomodoro Timer]]                                                :installed:

~org-pomodoro~ + logbook

You also need the sound-wav package.  I turn the ticking sound off because it is too low in frequency. I just use the alarms for the end of a pomodoro and the end of a break. I use the Tomightly.app for the ticking soud.

Here is my current configuration:

#+begin_src
 (use-package org-pomodoro

 :commands (org-pomodoro)

 :config

 (setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil)))))

 (use-package sound-wav)

 (setq org-pomodoro-ticking-sound-p nil)

 (setq org-pomodoro-ticking-sound-states '(:pomodoro :short-break :long-break))

 (setq org-pomodoro-ticking-sound-states '(:pomodoro))

 (setq org-pomodoro-ticking-frequency 1)

 (setq org-pomodoro-audio-player "mplayer")

 (setq org-pomodoro-finished-sound-args "-volume 0.9")

 (setq org-pomodoro-long-break-sound-args "-volume 0.9")

 (setq org-pomodoro-short-break-sound-args "-volume 0.9")

 (setq org-pomodoro-ticking-sound-args "-volume 0.3")
#+end_src

#+begin_src emacs-lisp
(define-key my-keymap (kbd "p") 'org-pomodoro)
#+end_src

I navigate the point to the headline in the respective org file and enter ~C-c o~. If the project lacks a logbook, a new one is created automatically.

* Writing & Editing Helpers

Enable the upcase-region function. I still have no idea why this is disabled by default.

#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
#+END_SRC

Whenever we visit a buffer that has no active edits, but the file has changed on disk, automatically reload it.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Whenever the cursor is on a paren, highlight the matching paren.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

Remove [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bidirectional-Editing.html][Bidirectional Editing]], text and code by [[https://github.com/munen/emacs.d][Munen]]

Emacs supports editing text written in scripts, such as Arabic, Farsi, and Hebrew, whose natural ordering of horizontal text for display is from right to left. However, digits and Latin text embedded in these scripts are still displayed left to right.

Whilst this is a great feature, it adds to the amount of line scans that Emacs has to do to render a line. Too many line scans will cause Emacs to hang. Since I personally do not work with right-to-left languages, I’m defaulting to displaying all paragraphs in a left-to-right manner.

#+BEGIN_SRC emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right)

(if (version<= "27.1" emacs-version)
    (setq bidi-inhibit-bpa t))
#+END_SRC

[[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Mark][The Mark and the Region]]

#+BEGIN_SRC emacs-lisp
(transient-mark-mode 1)
(delete-selection-mode t) ;; delete the selection with a keypress
#+END_SRC

[[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Indentation][Indentation]]

#+BEGIN_SRC emacs-lisp
;; keep my code tidy
(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)
;; ?? (setq-default tab-width 8) ;; but maintain correct appearance
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Xah Lee's [[http://xahlee.info/emacs/emacs/emacs_copy_file_path.html][Copy File Path of Current Buffer URL]]

#+begin_src emacs-lisp
  (defun xah-copy-file-path (&optional DirPathOnlyQ)
    "Copy current buffer file path or dired path. Result is full path.

     If `universal-argument' is called first, copy only the dir path.
     If in dired, copy the current or marked files.
     If a buffer is not file and not dired, copy value of `default-directory'.

     Version 2018-06-18 2021-09-30"
    (interactive "P")
    (let (($fpath
           (if (string-equal major-mode 'dired-mode)
               (progn
                 (let (($result (mapconcat 'identity (dired-get-marked-files) "\n")))
                   (if (equal (length $result) 0)
                       (progn default-directory )
                     (progn $result))))
             (if (buffer-file-name)
                 (buffer-file-name)
               (expand-file-name default-directory)))))
      (kill-new
       (if DirPathOnlyQ
           (progn
             (message "Directory copied: %s" (file-name-directory $fpath))
             (file-name-directory $fpath))
         (progn
           (message "File path copied: %s" $fpath)
           $fpath )))))

  (global-set-key (kbd "C-c w") 'xah-copy-file-path)
#+end_src

HTML → Org via Pandoc

#+begin_src emacs-lisp
  (defun drs-html-to-org ()
    (interactive)
    (let* ((contents (if (region-active-p)
                         (buffer-substring-no-properties (region-beginning) (region-end))
                       (buffer-substring-no-properties (point-min) (point-max))))
           (tmp-file (make-temp-file "eww"))
           (tmp-file-buffer (find-file-noselect tmp-file)))
      (with-current-buffer tmp-file-buffer
        (insert contents)
        (save-buffer))
      (kill-buffer tmp-file-buffer)
      (kill-new
       (shell-command-to-string
        (format "pandoc -f html -i %s -t org" tmp-file)))))
#+end_src

#+begin_src emacs-lisp
  (add-to-list 'load-path (locate-user-emacs-file "drs-elisp"))
#+end_src

** CSV Mode

#+begin_src emacs-lisp
(use-package csv-mode
  :ensure t
  :hook
  (csv-mode . csv-align-mode))
#+end_src

** Citations
:PROPERTIES:
:AUTHOR: D. Schmudde
:TITLE: Schmuddemacs
:PUBLISHER:
:GEO: Turin, Italy
:DATE_PUB: 2024-01-26
:DATE_ASSC: [2024-01-26 Fri]
:DESC: Testing functionality of ~drs-citation-set-properties~
:IMAGE:
:LINK: https://github.com/schmudde/schmuddemacs
:END:

#+begin_src emacs-lisp
(defvar drs-citation-properties '("AUTHOR" "TITLE" "PUBLISHER" "GEO" "DATE_PUB" "DATE_ASSC" "DESC" "IMAGE" "LINK" "PAGES"))

(defun drs-citation-set-properties ()
  (interactive)
  (dolist (property drs-citation-properties)
    (unless (org-entry-get (point) property)
     (org-set-property property ""))))
#+end_src

#+begin_src emacs-lisp :tangle no :results none
(drs-citation-set-properties) ; see above heading
#+end_src

#+begin_src emacs-lisp
(defun drs-make-citation ()
  (format "%s /%s/ (%s)"
  (org-entry-get (point) "AUTHOR")
  (org-entry-get (point) "TITLE")
  (org-entry-get (point) "DATE_PUB")))
#+end_src

#+begin_src emacs-lisp :tangle no
(drs-make-citation)
#+end_src

#+RESULTS:
: D. Schmudde /Schmuddemacs/ (2024-01-26)

** ChatGPT                                                       :installed:

1. Procure an [[https://platform.openai.com/account/api-keys][OpenAI API key]].
2. Currently using [[https://github.com/karthink/gptel][GPTel: A simple ChatGPT client for Emacs]]. [[https://www.reddit.com/r/emacs/comments/11k1q0s/chatgpt_inside_emacs/][Here]] is a current list of Emacs clients.

#+begin_src emacs-lisp
;; (add-to-list 'load-path "/home/schmudde/.emacs.d/packages/gptel/")
;; (require 'gptel)
#+end_src

- ~C-c RET~ to submit a query.
- Select a region of text, call ~M-x gptel-send~.
- Set chat parameters by calling ~M-x gptel-send~ with a prefix argument (~C-u C-c RET~):

TODO:

- Set ~gptel-api-key~ to the key or to a function that returns the key (more secure).
- Add custom Emacs [[https://github.com/agzam/.doom.d/blob/main/modules/custom/chat/autoload.el#L31][functions]].

On the [[https://github.com/karthink/gptel/issues/79][confusing]] and [[https://github.com/karthink/gptel/issues/197][flaky]] [[https://github.com/karthink/gptel/issues/106][GPT]] [[https://github.com/karthink/gptel/issues/197][4]] [[https://help.openai.com/en/articles/7102672-how-can-i-access-gpt-4][support]]:

#+name: https://github.com/karthink/gptel/issues/106#issuecomment-1858678687
#+begin_quote
Now that I can access gpt-4, I can confirm that setting the model using C-u gptel-send works as expected. The chat still self-identifies as gpt-3, but the model being used is gpt-4 as the billing and the http headers attest. Assuming there's nothing else to be done from gptel's side, I'm closing this issue.
#+end_quote

#+begin_quote
### can you read this url? https://plaid.com/docs/api/webhooks/webhook-verification/

I can't directly access or read content from URLs, including the one you've provided for Plaid's documentation on webhook verification. However, I can still offer information and guidance based on my training data up until my last update in April 2023. If you have specific questions about webhook verification with Plaid, feel free to ask, and I'll do my best to help based on the information available to me.
#+end_quote

** Markdown Mode                                                 :installed:
[[id:ac572c17-3f81-4c73-9a22-30b2d5e2c964][Markdown Documentation]]

- ~[[https://elpa.gnu.org/packages/adaptive-wrap.html][adaptive-wrap]]~: ensures that outlines wrap lines correctly with ~wrap-prefix~. (installed)
** Dictionary

Local hosting: Webster's 1913 edition. Or just use the internet, like in 2023.

#+begin_src emacs-lisp
  (setq dictionary-server "dict.org")
#+end_src
** Translations

Multi-Language Options:

- https://www.emacswiki.org/emacs/TextTranslator
- [[https://github.com/atykhonov/google-translate][Emacs interface to Google Translate]]
- [[https://github.com/lorniu/go-translate][Go-Translate]] (used here)

*** Comment Translate                                           :installed:

[[https://github.com/muqiuhan/emacs-comment-trans.el][Emacs Comment Translate]] 0.5.0 has a dependency on translate-shell, which can be installed via ~sudo apt install translate-shell~.

#+begin_src emacs-lisp
  (load "~/.emacs.d/site-lisp/comment-translate.el")

  (setq-default translate-shell-path "/usr/bin/trans"
                target-language "it"
                source-language "en"
                comment-translate-selected-color "red")

  (defvar default-translate-languages '(("it" "en")
                                        ("en" "it"))
    "Translate source-language to target-language list by default.")

  (global-set-key (kbd "C-c s t") 'translate-select-string)
#+end_src

*** Do Translate                                                :installed:

#+begin_src emacs-lisp
  (use-package go-translate
    :ensure t
    :demand t  ;; rather than an explicit require
    :bind (("C-z t" . gts-do-translate)))

  (setq gts-translate-list '(("it" "en") ("en" "it")))
  (setq gts-default-translator
       (gts-translator
        :picker (gts-prompt-picker)
        :engines (list (gts-google-engine) (gts-google-rpc-engine))
        :render (gts-buffer-render)))
#+end_src

-  ~h~ show help
-  ~g~ refresh q exit
-  ~x~ exchanges source language and target language and refresh the translation
-  ~M-n~/~M-p~, switch to the next/prev available translation direction, and refresh
-  ~C~ clear all caches in gts-default-cacher

*** German

[[https://github.com/munen/emacs.d#translations][dict.cc elisp wrapper]] by Alain M. Lafon. Just ~M-x dict~ to translate a word at a point.

#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/dict")
#+END_SRC

** Jinx (Spell Checking)                                         :installed:

- ~apt-get install aspell-it~
- ~apt-get install libenchant-2-dev~

#+begin_src emacs-lisp
  (use-package jinx
    :ensure t ; install, if missing
    :config
    (setq jinx-languages "en_US it")
    (setq jinx-include-modes '(text-mode prog-mode))
    (setq jinx-include-faces
          '((prog-mode font-lock-doc-face)
            (conf-mode font-lock-comment-face)))

    (global-jinx-mode 1)

    (define-key global-map (kbd "C-z $") #'jinx-correct)
    (define-key global-map (kbd "C-z l") #'jinx-languages))
#+end_src

~jinx-languages~ uses ~completing-read-multiple~, which allows you to pick more than one by separating them with a comma (technically, with the ~crm-separator~).

** Fill Paragraphs and Word Frequency

[[https://www.emacswiki.org/emacs/UnfillParagraph ][Unfill Paragraph]] by Stefan Monnier <foo at acm.org>. It is the opposite of ~fill-paragraph~ (~M-q~).

#+BEGIN_SRC emacs-lisp
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))
#+END_SRC

Handy key definition for ~unfill-paragraph~.

#+BEGIN_SRC emacs-lisp
(define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC

A very basic word count analysis [[https://www.emacswiki.org/emacs/WordCount][from the EmacsWiki]] that I need to enhance.

#+begin_src emacs-lisp
  (defun word-count-analysis (start end)
    "Count how many times each word is used in the region.
  Punctuation is ignored."
    (interactive "r")
    (let (words)
      (save-excursion
        (goto-char start)
        (while (re-search-forward "\\w+" end t)
          (let* ((word (intern (match-string 0)))
                 (cell (assq word words)))
            (if cell
                (setcdr cell (1+ (cdr cell)))
              (setq words (cons (cons word 1) words))))))
      (when (interactive-p)
        (message "%S" words))
      words))
#+end_src
** Editing Utilities

*** [[https://joaotavora.github.io/yasnippet/index.html][YASnippet]]                                                   :installed:

Expanding a YASnippet requires the ~yas-minor-mode~ + ~xxx-mode~ (major mode). The ~xxx-mode~ must match a directory in:

#+begin_src emacs-lisp :tangle no
yas-snippet-dirs
#+end_src

#+RESULTS:
| /home/schmudde/.emacs.d/snippets | /home/schmudde/.emacs.d/elpa/clojure-snippets-1.0.1/snippets |

For example, the currently supported modes include:

#+begin_src bash
ls /home/schmudde/.emacs.d/snippets
#+end_src

#+RESULTS:
| clojure-mode  |
| eshell-mode   |
| markdown-mode |
| org-mode      |

[[https://github.com/AndreaCrotti/yasnippet-snippets/tree/master/snippets][The project repo]] is a great snippet resource. Add them and then evaluate ~yas-reload-all~.

Make sure we can run Yas everywhere, including the minibuffer!
#+begin_src emacs-lisp
  (yas-global-mode 1)
  (add-hook 'minibuffer-mode-hook 'yas-minor-mode)
#+end_src

*** Multiple Cursors                                              :installed:

#+BEGIN_SRC emacs-lisp
  (define-key my-keymap (kbd "m") 'mc/edit-lines)
  (define-key my-keymap (kbd "}") 'mc/mark-next-like-this)
  (define-key my-keymap (kbd "{") 'mc/mark-previous-like-this)
#+END_SRC

*** undo-tree                                                   :considering:

#+BEGIN_SRC emacs-lisp :tangle no
(global-undo-tree-mode)
(global-set-key (kbd "M-/") 'undo-tree-visualize)
#+END_SRC

** Search Engines                                              :considering:

https://github.com/hrs/engine-mode

* Programming

#+begin_src emacs-lisp
  (defun drs-kebab-string (beg end)
    "Make text between BEG and END use kebab-case."
    (interactive "r")
    (when (region-active-p)
      (let* ((string (buffer-substring-no-properties beg end))
             (kebab (s-dashed-words string)))
        (delete-region beg end)
        (insert kebab))))

  (define-key my-keymap (kbd "k") 'drs-kebab-string)
#+end_src

** Yorba

#+begin_src emacs-lisp
  (load "/home/schmudde/.secrets/yorba-env-credentials.el" :no-error-if-missing)
#+end_src

** Shells

#+begin_src emacs-lisp
(global-set-key (kbd "<f5>") 'eshell)
(global-set-key (kbd "<f6>") 'shell)
#+end_src

** Programming Utilities

*** Restclient                                                     :installed:

Also installed: ~ob-restclient.el~ for Emacs Restclient support in [[https://github.com/alf/ob-restclient.el][org-babel]]. Header arguments for ~:results~: ~raw|value|pure|table~

*** Clojure

- :considering:
    - ~helm-cider~
    - ~ivy-cider~

**** Smartparens                                             :considering:
[[https://github.com/Fuco1/smartparens/wiki/Paredit-and-smartparens][Smartparens (installed) vs. Paredit]]

"By default smartparens is much less strict about the 'balancedness' of the buffer and it usually allows you to delete whatever you please. However, there are settings (like smartparens-strict-mode) you can use to have it behave more like paredit."

**** Paredit                                                      :installed:

I want to select forms and delete them in Paredit. Setting the delete key has been a bit tricky.

~C-h b~: input decoding map translations:

- Key: ~M-[ 3 ; 5 ~~
- Binding: ~<C-delete>~

For example, ~M-O A~ will move the cursor ~<up>~.

For the binding, I have tried ~(kbd "\e[3;5~")~ from the function key sequences for xterm for /C-del/: ~(define-key map "\e[3;5​~" [C-delete])~ in ~/usr/share/emacs/27.1/lisp/term~ as well as ~(kbd "M-[ 3 ; 5 ~")~ from the input decoding map translations above.

According to [[https://docs.cider.mx/cider/additional_packages.html][the official Cider Docs]]:

#+begin_quote
The use of paredit when editing Clojure (or any other Lisp) code is highly recommended.  You’re probably using it already in your clojure-mode buffers (if you’re not you probably should). You might also want to enable paredit in the REPL buffer as well:

(add-hook 'cider-repl-mode-hook #'paredit-mode)
#+end_quote

But the following hooks do not work (CIDER 1.5, 1.6 freezes):

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-delete>") 'paredit-delete-region)
  ;; (add-hook 'cider-mode-hook #'enable-paredit-mode)
  ;; (add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
#+END_SRC

**** [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]] and [[https://github.com/clojure-emacs/cider][cider]]                                       :installed:

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-c c") 'cider-repl-clear-buffer)
#+end_src

**** [[https://github.com/clojure-emacs/clj-refactor.el][clj-refactor]]                                                 :installed:

#+BEGIN_SRC clojure
  (require 'clj-refactor)

  (defun drs-clojure-mode-hook ()
      (clj-refactor-mode 1)
      (yas-minor-mode 1) ; for adding require/use/import statements
      ;; This choice of keybinding leaves cider-macroexpand-1 unbound
      (cljr-add-keybindings-with-prefix "C-c C-m"))

  (add-hook 'clojure-mode-hook #'drs-clojure-mode-hook)
#+END_SRC
** LSP Mode                                                      :installed:

Install the [[https://clojure-lsp.io/][clojure-lsp]] GraalVM native executable for Linux

- Script: ~sudo bash < <(curl -s https://raw.githubusercontent.com/clojure-lsp/clojure-lsp/master/install)~ will install ~clojure-lsp~ in ~/usr/local/bin~
- Native binary (recommended): The binaries are available on [[https://github.com/clojure-lsp/clojure-lsp/releases][Github releases]] as ~clojure-lsp-native-<os>-<arch>.zip~, after downloading you just need to unzip it. Tried [[https://github.com/clojure-lsp/clojure-lsp/releases/download/2022.11.03-00.14.57/clojure-lsp-native-linux-amd64.zip][clojure-lsp-native-linux-amd64.zip]] under *Assets*.

#+begin_src bash
whereis clojure-lsp
#+end_src

#+RESULTS: clojure-lsp-path
: clojure-lsp: /usr/local/bin/clojure-lsp

To configure Emacs to use the nREPL-enabled executable, run ~(setq lsp-clojure-custom-server-command '("/usr/local/bin/clojure-lsp"))~. To customize server path, you may find the variable using: ~M-x customize-group~ RET ~lsp-clojure-mode~.

Now it's possible to explore a Clojure codebase without having to start a REPL. You can essentially do anything besides evaluation. ~clojure-lsp~ uses ~clj-kondo~ under the hood to do the linting.

Other commands

- Restart the clojure-lsp server, execute: ~lsp-workspace-restart~.
- Server info: ~lsp-clojure-server-info~
- To connect the nREPL client, run ~cider-connect-clj~, with "localhost" and the port (e.g. ~nrepl://localhost:47888~)
- ~i~: when it's your own project
- ~n~: when it's a library. It may even write the stuff to a .jar
- ~lsp-describe-session~: what projects does the server work with?

The configuration includes custom support for [[https://emacs-lsp.github.io/lsp-ui][~lsp-ui~]]. This is configured in *[LSP Headerline]                     LSP support for headerline* (e.g. ~lsp-headerline-breadcrumb-path-face~).

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((clojure-mode . lsp)
           (typescript-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config (define-key lsp-mode-map (kbd "C-c l d s") 'lsp-ui-doc-show)
            (define-key lsp-mode-map (kbd "C-c l d h") 'lsp-ui-doc-hide))
#+end_src

TODO: Note, ~lsp-ui~ was:
(global-set-key (kbd "C-c l d s") 'lsp-ui-doc-show)
(global-set-key (kbd "C-c l d h") 'lsp-ui-doc-hide)

** Flycheck, flycheck-clojure, flycheck-clj-kondo                :installed:
** Typescript                                                    :installed:

~typescript-mode~:

Use ~ts-ls~ as language server

** SX                                                           :considering:

Stack Exchange

** Settings

Tell ~python-mode~ to use Python 3

#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python3")
#+END_SRC

** [[https://www.emacswiki.org/emacs/HideShow][Hide Show]]

Considering these bindings:

 (global-set-key (kbd "M-+") 'hs-show-block)
 (global-set-key (kbd "M-*") 'hs-show-all)
 (global-set-key (kbd "M--") 'hs-hide-block)
 (global-set-key (kbd "M-Ç") 'hs-hide-level)
 (global-set-key (kbd "M-:") 'hs-hide-all)

Load it in ~clojure-mode~ or ~cider-mode~:

#+begin_src emacs-lisp
  ;; (add-hook 'clojure-mode-hook 'hs-minor-mode)
  ;; (add-hook 'cider-mode-hook 'hs-minor-mode)
#+end_src

** Literate Programming in org-babel

~emacs-lisp~ works by default. Bash as well.

#+begin_src bash
ls b*
#+end_src

#+RESULTS:
: bookmarks

Stop Emacs asking for confirmation to evaluate:

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Add ~(require 'org-tempo)~ to enable ~<s TAB~ code block shortcut.

#+BEGIN_SRC emacs-lisp :results silent
  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
                               (clojure . t)
                               (python . t)
                               (restclient . t)
                               (shell . t)
                               (http . t)
                               (sql . t)))

  (require 'org-tempo)
#+END_SRC

#+BEGIN_SRC python :tangle no
return 3 + 7
#+END_SRC

#+RESULTS:

*** Clojure

From the documentation, [[https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-clojure.html][Clojure in Org Mode Babel]]:

#+BEGIN_SRC emacs-lisp :results silent
  ;; Clojure
  (require 'org)
  (require 'ob-clojure)
  ;; Cider
  (setq org-babel-clojure-backend 'cider)
  (require 'cider)
#+END_SRC

** [[https://github.com/magit/forge][Git Forge]]                                                   :considering:

* eMail

All about [[[https://www.djcbsoftware.nl/code/mu/mu4e/Contexts.html][contexts]]: I have different e-mail accounts for private and work email, each with their own values for folders, e-mail addresses, mailservers and so on. Use ~;~ to switch contexts in mu4e.

~M-x mu4e-news~ (currently version 1.6) to see the [[https://github.com/emacsmirror/mu4e/blob/master/NEWS.org][NEWS (user visible changes & bigger non-visible ones)]]. See also the [[https://github.com/djcb/mu/releases][Release log]].

#+begin_src bash :results drawer
mu --version
#+end_src

#+RESULTS:
:results:
version 1.10.7
:end:

** Personal eMail Addesses

~mu init --maildir=/home/schmudde/.local/share/mail --my-address=a@example.com b@example.com~

+-------------------+----------------------------------+
| maildir           | /home/schmudde/.local/share/mail |
+-------------------+----------------------------------+
| database-path     | /home/schmudde/.cache/mu/xapian  |
+-------------------+----------------------------------+
| schema-version    | 466                              |
+-------------------+----------------------------------+
....
+-------------------+----------------------------------+
| created           | Fri 01 Mar 2024 06:03:36 PM CET  |
+-------------------+----------------------------------+
| personal-address  | a@example.com                    |
+-------------------+----------------------------------+
| personal-address  | b@example.com                    |
+-------------------+----------------------------------+

- ~database created; use the 'index' command to fill/update it.~
- ~mu index~: ~idexing maildir /.../.local/share/mail -> store /.../.cache/mu/xapian indexing messages; checked: 33955; updated/new: 33955; cleaned-up: 0~

** Using mu-wizard                                               :installed:

Dependencies

1. [[https://github.com/cemkeylan/mu-wizard/][mu-wizard]]: shell script to setup mu4e for Emacs
2. [[https://www.passwordstore.org/#extensions][pass]] (via ~apt~) for passwords
3. isync (via ~apt~) for offline mail storage
    - see also [[http://isync.sourceforge.net/][isync main]], [[https://wiki.archlinux.org/title/Isync][isync on Arch Linux]]
    - ~mbsync -a~: update each folder
    - while isync is the project name, mbsync is the current executable name; this change was necessary because of massive changes in the user interface.
4. mu (aka ~maildir-utils~) (install ~mu4e~ via ~apt~)
    - Mu4e and mu need to stay in sync, so it's best to use the package manager for both.
    - [[https://www.djcbsoftware.nl/code/mu/][Official website]]
5. msmtp (via ~apt~) for sending mails
6. altermime (via ~apt~) for [[https://emacs.stackexchange.com/a/23815][deleting attachments]]
    - Installed and got this note: Postfix (main.cf) was not set up.  Start with
  ~cp /usr/share/postfix/main.cf.debian~ ~/etc/postfix/main.cf~. If you need to make changes, edit ~/etc/postfix/main.cf~ (and others) as needed. To view Postfix configuration values, see postconf(1).
7. [[https://xapian.org/][Xapian]] (install ~libxapian-dev~ via ~apt~) is an Open Source Search Engine Library
8. [[https://github.com/jwiegley/use-package][use-package]] (via MELPA)

Commands

0. Initialize the password manager before running ~muw~ (~pass int xxx@yyy.zzz~ after running ~gpg --gen-key~ if no local key exists)
1. ~muw add~: a script that walks you through adding a new eMail config to
2. ~muw sync personal~ where ~personal~ is an account name [switch steps #2 and #3 if necessary]
3. ~muw mu-init~ to setup database store
4. ~mu index~ to index for search (Xapian), also to rebuild the index

#+BEGIN_SRC shell :results drawer
muw list
#+END_SRC

#+RESULTS:
:results:
personal
yorba
:end:

#+BEGIN_SRC emacs-lisp
  (load-file "~/.config/mu4e/mu4e-config.el")

  (add-to-list 'load-path "~/.config/mu4e")
  (require 'mu4e-config) ;; custom name?

  (use-package mu4e-config ;; custom name?
    :after mu4e
    :load-path "~/.config/mu4e"
    :bind (("C-c m" . mu4e)
           ("C-z A" . 'mu4e-view-save-attachments)
           ("C-c i" . 'mu4e-org-store-and-capture)))

  ;; mu4e does not by default rename files when moving them to a new directory and this then causes problems for mbsync.
  (setq mu4e-change-filenames-when-moving t)

  ; mu4e defaults to plain text eMails with the original 79 character limit.
  ; Set this so plain text eMails should flow correctly for recipients
  (setq mu4e-compose-format-flowed t)

  ;; custom preferences
  (setq mu4e-update-interval (* 7 60)) ; refresh every 420 seconds/7 minutes
  ;; (setq mu4e-maildir-shortcuts '(("/personal/INBOX.Personal" . ?p)
  ;;                               ("/personal/INBOX" . ?i)))
#+END_SRC

Other than ~"~/.config/mu4e/mu4e-config.el"~, configuration files are also found in ~"~/.config/mu4e/accounts/personal.el"~. This is where I've moved ~(setq mu4e-compose-signature "w: http://schmud.de\ne: d@schmud.de\nt: @dschmudde")~

#+BEGIN_SRC shell :results drawer
mu info
#+END_SRC

#+RESULTS:
:results:
+-------------------+----------------------------------+
| maildir           | /.../.local/share/mail           |
+-------------------+----------------------------------+
| database-path     | /.../.cache/mu/xapian            |
+-------------------+----------------------------------+
| schema-version    | 466                              |
+-------------------+----------------------------------+
| max-message-size  | 100000000                        |
+-------------------+----------------------------------+
| batch-size        | 50000                            |
+-------------------+----------------------------------+
| created           | Fri 01 Sep 2023 05:12:47 PM CEST |
+-------------------+----------------------------------+
| messages in store | 33955                            |
+-------------------+----------------------------------+
| last-change       | Fri 01 Mar 2024 05:48:38 PM CET  |
+-------------------+----------------------------------+
| last-index        | Fri 01 Mar 2024 05:48:39 PM CET  |
+-------------------+----------------------------------+
:end:

** Attachments (MIME parts)

MIME-part actions allow you to act upon MIME-parts in a message - such as attachments. For now, these actions are defined and documented in ~mu4e-view-mime-part-action~, bound to ~A~.

mu4e v1.6 uses the gnus-based message viewer as the default, which includes support for S/MIME.

- For .pdfs: ~open-with~ function mapped to ~A~ /attachment number/ ~w~ ~okular~.
- With IDO ~C-j~ to save with the default filename
- List found in ~/home/schmudde/.config/mimeapps.list~
    - e.g. ~application/pdf=xournal.desktop;okularApplication_pdf.desktop;~
    - e.g. ~xdg-open xyz.pdf~ will parse the above list

- The gnus-based view is deceitful.
    - The ~o~ binding works when the cursor is over the attachment.
    - Move the cursor over the file with the cursor S-return runs the command ~mu4e~view-save-attach-from-binding~
- While the cursor is on the MIME part, the options change a bit
    - ~i~: open in internal editor (useful for text MIME parts when the rendering sucks)
    - ~e~: open in external editor

Where are attachments, anyway?

#+BEGIN_SRC emacs-lisp :tangle no
mu4e-attachment-dir
#+END_SRC

#+RESULTS:
: /home/schmudde/

While I'm making attachments better, mark the file(s) in dired you would like to attach and press ~C-c RET C-a~ or use ~gnus-dired-attach~ on each file. Via the docs: File: mu4e.info, Node: Dired.

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC

Where do attachments open?

#+begin_src bash
xdg-mime query default application/pdf
#+end_src

#+RESULTS:
: okularApplication_pdf.desktop

*** Explanation

#+name: /usr/local/share/emacs/site-lisp/mu4e/mu4e-message.el
#+begin_quote
Attachments are a list of elements with fields ~:index~ (the number of the MIME-part), ~:name~ (the file name, if any), ~:mime-type~ (the MIME-type, if any) and ~:size~ (the size in bytes, if any).
#+end_quote

To use /altermime/, one needs a ~:path~ and the ~name~ of the part to remove.

**** See the ~:path~

#+name: (mu4e-message-at-point)
#+begin_src
'(:path /home/schmudde/.local/share/mail/personal/INBOX/cur/1697530521.82007_2.pop-os,U=5023:2,S
 :size 139602
 :reply-to ((:email MYTOOLBOX@TOOLBOXCOWORKING.COM))
 :changed (25902 36366 0)
 :date (25901 48979 0)
 :flags (seen attach)
 :from ((:email no-reply@nexudus.com :name Toolbox))
 :message-id 1gzhqUHxSFeAN4TMy97F9g@geopod-ismtpd-6
 :priority normal
 :subject We could not take payment for invoice #TB-2798
 :to ((:email d@schmud.de :name d@schmud.de))
 :maildir /personal/INBOX
 :docid 35184
 :meta (:path 18:z :level 0 :date n652dbf53 :data-tstamp (0 0 0) :root t :thread-subject t))
#+end_src

**** See the ~name~

To see the MIME part names: ~(mu4e--view-gather-mime-parts)~ → ~((2 #<buffer  *mm*-715641> ("application/octet-stream" (name . "toolbox--tb-2798-pdf_1433511060.pdf")) base64 nil ("attachment") nil nil nil))~

**** ∴ the /altermime/ command

~altermime --input="/home/schmudde/.local/share/mail/personal/INBOX/cur/1697530521.82007_2.pop-os,U=5023:2,S" --remove="toolbox--tb-2798-pdf_1433511060.pdf"~

*** Implementation

It's important that I can delete large, superfluous attachments. No reason to keep them around year after year. Thankfully, I found this bit of Elisp code [[https://emacs.stackexchange.com/a/23815][on Stackexchange]]. Depends on altermime.

But the gnus-based message view update in v1.6 of mu/mu4e provides a broken built-in function, ~gnus-mime-delete-part~, that gives this error message: /The current group does not support deleting of parts/. It seems like an issue with [[https://mail.gnu.org/archive/html/emacs-diffs/2021-01/msg00681.html][a setting]]: ~(when (gnus-group-read-only-p) (error "The current group does not support deleting of parts"))~?

Luckily there seems to be [[https://emacs.stackexchange.com/a/70992/11015][a solution]]. Note: the header listing the attachments is not updated but when you leave the email and reopen it, the attachment is gone

Save attachments changed quite a bit with the mu/mu4e 1.6 updates. Thankfully Aimé Bertrand wrote and updated [[https://macowners.club/posts/mu4e-save-attachments-faster-with-ivy/#edits][Mu4E - Save attachments faster with ivy]]. Here are the functions they provide using the new ~gnus-article-mode~.

#+begin_src emacs-lisp
  (defun drs-mu4e-delete-attachment (number)
      "Use altermime to delete current email's NUMBERth attachment."
      (interactive (list (read-number "Delete attachmenet with NUMBER: ")))
      (if-let ((email-file (mu4e-message-field-at-point :path))
               (parts gnus-article-mime-handle-alist)
               (part (alist-get number parts))
               (element (or (cdr (assoc 'filename (assoc "attachment" (cdr part))))
                            (cdr (cadr (cadr part))))))
          (if (and (executable-find "altermime")
                   (y-or-n-p (format "Delete %s attachment?"
                                     (propertize element 'face 'error))))
              (shell-command (format "altermime --input='%s' --remove='%s'" email-file element))
              ;; (message (format "altermime --input='%s' --remove='%s'" email-file element))
            (user-error "Altermime is not installed"))
        (message "Did not find %s attachment to delete" number)))
#+end_src


That ~or~ statement to get the ~element~ is pretty gnarly. But I found two ways that attachments may be ordered. The second is just structured data and it's pretty rough. This is how it works:

#+begin_src emacs-lisp
  (cdr (cadr (cadr
              '("#<buffer  *mm*-538155>" ("application/octet-stream"
                                          (name . "DHL_Fattura_cash_464508.pdf"))
                base64 nil ("inline") nil nil nil))))
#+end_src

#+RESULTS:
: DHL_Fattura_cash_464508.pdf

I still have the [[file:~/Dropbox/org/inbox.org::*Attachment debugging][old my-delete-attachment code here]] and [[file:~/Dropbox/org/inbox.org::*Improve attachment deletion.][here]]. But this seems to be more elegant. There's not much I can do about the ~cdr~ madness because of the original library.

#+begin_src shell :results drawer
mu fields
#+end_src

#+RESULTS:
:results:
#
# message fields
#
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| field-name | alias     | short | search  | value | sexp | example query                 | description                    |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| bcc        |           | h     | index   | yes   | yes  | bcc:foo@example.com           | Blind carbon-copy recipient    |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| body       |           | b     | index   | no    | no   | body:capybara                 | Message plain-text body        |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| cc         |           | c     | index   | yes   | yes  | cc:quinn@example.com          | Carbon-copy recipient          |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| changed    |           | k     | range   | yes   | yes  | changed:30M..                 | Last change time               |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| date       |           | d     | range   | yes   | yes  | date:20220101..20220505       | Message date                   |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| embed      |           | e     | index   | no    | no   | embed:war OR embed:peace      | Embedded text                  |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| file       |           | j     | boolean | no    | no   | file:/image\.*.jpg/           | Attachment file name           |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| flags      | flag      | g     | boolean | yes   | yes  | flag:unread AND flag:personal | Message properties             |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| from       |           | f     | index   | yes   | yes  | from:jimbo                    | Message sender                 |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| maildir    |           | m     | boolean | yes   | yes  | maildir:/private/archive      | Maildir path for message       |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| list       |           | v     | boolean | yes   | yes  | list:mu-discuss.example.com   | Mailing list (List-Id:)        |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| message-id | msgid     | i     | boolean | yes   | yes  | msgid:abc@123                 | Message-Id                     |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| mime       | mime-type | y     | boolean | no    | no   | mime:image/jpeg               | Attachment MIME-type           |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| path       |           | l     | boolean | yes   | yes  | path:/a/b/Maildir/cur/msg:2,S | File system path to message    |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| priority   | prio      | p     | boolean | yes   | yes  | prio:high                     | Priority                       |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| references |           | r     | no      | yes   | yes  |                               | References to related messages |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| size       |           | z     | range   | yes   | yes  | size:1M..5M                   | Message size in bytes          |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| subject    |           | s     | index   | yes   | yes  | subject:wombat                | Message subject                |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| tags       | tag       | x     | boolean | yes   | yes  | tag:projectx                  | Message tags                   |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| thread     |           | w     | boolean | yes   | no   |                               | Thread a message belongs to    |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+
| to         |           | t     | index   | yes   | yes  | to:flimflam@example.com       | Message recipient              |
+------------+-----------+-------+---------+-------+------+-------------------------------+--------------------------------+

#
# message flags
#
+-----------+----------+----------+-----------------------------+
| flag      | shortcut | category | description                 |
+-----------+----------+----------+-----------------------------+
| draft     | D        | file     | Draft (in progress)         |
+-----------+----------+----------+-----------------------------+
| flagged   | F        | file     | User-flagged                |
+-----------+----------+----------+-----------------------------+
| passed    | P        | file     | Forwarded message           |
+-----------+----------+----------+-----------------------------+
| replied   | R        | file     | Replied-to                  |
+-----------+----------+----------+-----------------------------+
| seen      | S        | file     | Viewed at least once        |
+-----------+----------+----------+-----------------------------+
| trashed   | T        | file     | Marked for deletion         |
+-----------+----------+----------+-----------------------------+
| new       | N        | maildir  | New message                 |
+-----------+----------+----------+-----------------------------+
| signed    | z        | content  | Cryptographically signed    |
+-----------+----------+----------+-----------------------------+
| encrypted | x        | content  | Encrypted                   |
+-----------+----------+----------+-----------------------------+
| attach    | a        | content  | Has at least one attachment |
+-----------+----------+----------+-----------------------------+
| unread    | u        | pseudo   | New or not seen message     |
+-----------+----------+----------+-----------------------------+
| list      | l        | content  | Mailing list message        |
+-----------+----------+----------+-----------------------------+
| personal  | q        | content  | Personal message            |
+-----------+----------+----------+-----------------------------+
| calendar  | c        | content  | Calendar invitation         |
+-----------+----------+----------+-----------------------------+
:end:

** org-msg                                                     :considering:

OrgMsg is a GNU/Emacs global minor mode mixing up Org mode and your Mail User Agent Mode to compose and reply to emails in a HTML friendly style.

** Custom IMAP Folders

**Labels in Gmail**

/See All Settings/ -> /Labels/ -> /Show in IMAP/

This seems to sync after I run:

#+begin_src bash
muw sync yorba
#+end_src

** Troubleshooting, Breaking Changes, and Recovery

The server protocol (as used by mu4e) often does not offer compatibility between minor release numbers (1.4 vs 1.6 vs 1.8) nor within development series (such as 1.7). However, within a stable release (such as all 1.6.x) the protocol won’t change (except if required to fix some severe bug; this never happened in practice). To understand what's happening within each release, refer to [[https://github.com/emacsmirror/mu4e/blob/master/NEWS.org][NEWS (user visible changes & bigger non-visible ones)]].

**Recovery Tips**

- ~Error (mu4e): expected schema-version 452, but got 451; please use 'mu init'~
- When the database schema of mu changes, run ~muw mu-init~ to reindex the database. For example, when upgrading from 1.6.1 to 1.6.2+.

**UID Errors**

If you encounter UID errors (e.g. /Maildir error: duplicate UID 15/) use the tips suggested by [[http://tiborsimko.org/mbsync-duplicate-uid.html][Troubleshooting Mbsync Duplicate UID Errors]]:

- ~ls -lR cur | grep -o 'U=.*:' | sort | uniq -d~: find the duplicates in ~cur~
- ~find . -name "*U=2:*" -exec ls -l {} \;~ &rArr; ~./cur/1419106858.5661_2.pcuds06,U=2:2,S~ &amp; ~/cur/1423819205.29514_1.pcuds06,U=2:2,S~
- ~mv ./cur/1423819205.29514_1.pcuds06,U=2:2,S ./cur/1423819205.29514_1.pcuds06~: This deduplicates the problematic UID and forces mbsync to create new UID for the second message at its next run.
- ~mbsync -a | grep -i error | wc -l~

**Error 102**

Marking and deleting eMails using ~d~, ~x~ yields ⤵

#+BEGIN_SRC text
Are you sure you want to execute 3 marks? (y or n) y
error in process filter: cond: Error 102: failed to move message: cannot read /home/schmudde/.local/share/mail/personal/INBOX/cur/1673538122.111542_1.pop-os,U=200:2,S
error in process filter: Error 102: failed to move message: cannot read /home/schmudde/.local/share/mail/personal/INBOX/cur/1673538122.111542_1.pop-os,U=200:2,S
#+END_SRC

I believe this was because the local inbox was out of sync with the remote inbox.

**Gmail**

Run the process from the command line for more insight.

#+begin_src bash
muw sync yorba
#+end_src

1. Make sure to turn on Less Secure Apps under Google Account -> [[https://myaccount.google.com/security][Security]]
2. If you use 2-Step-Verification and get a "password incorrect" error when you sign in, you can try to [[https://support.google.com/accounts/answer/185833][use an App Password]]. The instructions had "App Passwords" in the wrong place so I had to search for it in my "Google Account" search bar.
3. Update the password using ~pass edit schmudde@yorba.co~: ~xxxx yyyy zzzz aaaa~ (no need to keep the spaces). Hints:
    - If it's in a name space, don't forget to prefix it. (e.g. ~muw/schmudde@yorba.co~)
    - The ~pass~ editor opens up in nano, so don't use ~shell~ or ~eshell~ in Emacs
    - This will probably need to be reset every time there is a password reset.

**[[https://github.com/djcb/mu/issues/2144][Failed to open glass revision file for reading]]**

If ~muw sync personal~ &rArr; ~error: failed to open store @ /home/schmudde/.cache/mu/xapian: /home/schmudde/.cache/mu/xapian/iamglass: Failed to open glass revision file for reading~. Can be caused by the existence of only a ~flintlock~ file.

Run ~muw mu-init~ to initialise the database first.

** Other Approaches

- System Crafters videos: [[https://youtu.be/WiyqU7gmKsk][A good intro to eMail in Emacs video]], [[https://www.youtube.com/watch?v=yZRyEhi4y44][Streamline Your E-mail Management with mu4e]]
- [[https://github.com/Ebert-Hanke/emacs#email-in-emacs][Guide to Guides]]
- [[https://github.com/munen/mu4e-views][mu4e Views]]
- [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/][Link to A Complete Guide to Email in Emacs using Mu and Mu4e]]
- [[https://emacs.stackexchange.com/questions/12927/reading-and-writing-email-with-emacs][Stack Exchange overview]]
- [[https://chrisdone.com/posts/emacs-mail/][Emacs, Notmuch and Offlineimap]]
- [[https://rakhim.org/fastmail-setup-with-emacs-mu4e-and-mbsync-on-macos/][Fastmail setup with Emacs, mu4e and mbsync on macOS]]

* Resources

** Info Mode

Install the missing [[https://www.emacswiki.org/emacs/InfoMode][Info Mode]] manual because of an ~Info-find-file: Info file emacs does not exist~ error. Run ~apt-get install emacs-common-non-dfsg~ [Emacs 26.1]+ package (Debian). This also gets me the Org Manual.

~C-u C-h i~: read an Info manual that is not in your InfoPath

** Outside Links

- Inspiring literate GNU Emacs Configuration File
    - Seth Morabito's literate [[https://github.com/sethm/emacs-files/blob/master/configuration.org][GNU Emacs Configuration File]]
    - Alain M. Lafon's [[https://github.com/munen/emacs.d][Play Emacs Like an Instrument]]
    - Colin McLear's [[https://github.com/mclear-tools/dotemacs][Emacs for Academic Writing]], [[https://github.com/mclear-tools/dotemacs][post]]
    - Collections of configs
        - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
        - [[https://github.com/caisah/emacs.dz][Starter packs/defaults]]
        - [[https://www.reddit.com/r/emacs/comments/qa6tgk/your_first_taste_of_emacs_the_beginners_guide_i/][Beginner's Guide I Wish I Had]]
    -  A minimum-viable [[https://gist.github.com/adam-james-v/7a61612ce0649afc78513f54b337d8c9][emacs config]] for literate programming with Clojure by Adam James ([[https://www.youtube.com/watch?v=bhNvwxFV5vU][video]])
- Inspiring Blog Posts
    - [[https://dev.to/matheusemm/simple-emacs-configuration-for-clojure-development-11i3][Simple Emacs configuration for Clojure development]]
    - [[https://karthinks.com/software/batteries-included-with-emacs/][Batteries Included With Emacs]]
    - [[https://protesilaos.com/codelog/2024-02-17-emacs-modern-minibuffer-packages/][Emacs: modern minibuffer packages (Vertico, Consult, etc.)]]
- [[https://github.com/alphapapa/unpackaged.el][Unpackaged]]: A collection of useful Emacs Lisp code that isn’t substantial enough to be packaged.
- Org Mode Babel: [[https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.md][tangling/evaluating/weaving]]
- Documentation
    - [[https://emacsdocs.org/][Emacs Docs]]
    - [[https://emacs.sexy/][Emacs is Sexy]]

* Miscellaneous Notes

I find printing a default message in the empty scratch buffer opened at startup occasionally useful for testing.

~(setq initial-scratch-message "Welcome in Emacs")~

[[https://github.com/github/markup][Github markup]] uses [[https://github.com/wallyqs/org-ruby][org-ruby]] to convert org-mode to HTML. It supports footnotes and some custom markup.

[[file:https://readme-jokes.vercel.app/api]]

** iOS Roll call

- https://plainorg.com for general org usage
- https://flathabits.com for habit tracking
- *scratch* for jotting things down ASAP

** Key Bindings

[[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs]]

> One important point to note is that you must surround function and navigation keys with < and >. Those keys include F-keys, arrow keys and home row keys, like so: <home>, <f8> and <down>. But if you want represent the key C-c p then write (kbd "C-c p").

** org-mode tips

[[https://orgmode.org/manual/Escape-Character.html][Escape Character]]

You may sometimes want to write text that looks like Org syntax, but should really read as plain text. Org may use a specific escape character in some situations, i.e., a backslash in macros (see Macro Replacement) and links (see Link Format), or a comma in source and example blocks (see Literal Examples). In the general case, however, we suggest to use the zero width space. You can insert one with any of the following:

- ~C-x 8 <RET> zero width space <RET>~
- ~C-x 8 <RET> 200B <RET>~
