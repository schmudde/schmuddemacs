#+TITLE: Schmuddemacs
#+AUTHOR: David Schmudde
#+LANGUAGE: en
#+STARTUP: align indent fold

Welcome to Schmuddemacs!

My GNU Emacs configuration file is written to help me remember all the small decisions I made along the way and as a guide for any souls who might stumble upon this page.

Software updates will inevitably break existing configurations. I have often revisited a relevant snippet of Emacs Lisp code with a pithy comment and felt lost. The /Literate Programming/ style offers more context. After all, code was written primarily for humans to read, including all future Schmuddes, and only incidentally for machines to interpret.

Code evaluation is provided by ~org-babel~, which provides a method for extracting and evaluating Emacs Lisp expressions inside an org-mode file.

This is currently loaded by my ~init.el~ using ~(org-babel-load-file (concat user-emacs-directory "config.org"))~. This README is a symlink to ~config.org~.

The move to Org Mode is currently a work in progress!

[[under-construction.gif]]

* Package Overview

Come winter, having a snow in my Emacs is an absolute necessity. ~snow.el~ is available in [[https://melpa.org/#/snow][MELPA]] or on [[https://github.com/alphapapa/snow.el][GitHub]]. Download the file, ~curl -O https://raw.githubusercontent.com/alphapapa/snow.el/master/snow.el~, open it in a buffer, ~eval-buffer~, and ~M-x snow RET~.

** Movement Utilities

- TODO: also: avy - company - [[https://depp.brause.cc/nov.el/][nov.el]]
- [[https://github.com/nonsequitur/smex][smex]], a package that improves the use of M-x. TODO: to use everywhere ~(global-set-key (kbd "M-x") 'smex)~

*** Completion Frameworks

**** IDO                                                          :installed:

[[https://www.masteringemacs.org/article/introduction-to-ido-mode][Interactively DO Things]]

Improvements over Emacs' TAB-based completion.

- ~C-s~ and ~C-r~: Move to the next and previous match
- ~C-d~ Open ~M-x dired~ buffer in current directory

#+BEGIN_SRC emacs-lisp
  (require `ido)
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

~Ido-Everywhere~ minor mode: Toggle use of Ido for all buffer/file reading (~C-x C-f~, ~C-x d~, and ~C-x b~).
**** [[https://github.com/bbatsov/projectile][Projectile]]                                                :installed:

Navigate between files in a project. From the README:

- ~C-c p f~: open a file to add a project
- ~C-c p p~: switch to another project

#+begin_src emacs-lisp
  (projectile-mode +1)
  ;; Recommended keymap prefix on Windows/Linux
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src

To get the most of Projectile you also need to enable (and potentially install) some minibuffer completion framework (e.g. ido, ivy or selectrum). See this section of the documentation for more details.

**** Helm: filter-as-you-type completion                        :considering:

For in-depth searching and completion.

- Install via the package manager
- ~C-x c~: prefix for all Helm commands
- see also:
    - helm-rg
    - [[https://github.com/bbatsov/helm-projectile][helm projectile]]: ~helm-projectile-grep~, ~helm-projectile-find-file~

#+BEGIN_SRC emacs-lisp :tangle no
(require 'helm)

(setq-default helm-M-x-fuzzy-match t)
(global-set-key "\C-x\C-m" 'helm-M-x)
(global-set-key "\C-c\C-m" 'helm-M-x)
#+END_SRC

*** Markdown Mode                                                 :installed:
[[id:ac572c17-3f81-4c73-9a22-30b2d5e2c964][Markdown Documentation]]

- ~[[https://elpa.gnu.org/packages/adaptive-wrap.html][adaptive-wrap]]~: ensures that outlines wrap lines correctly with ~wrap-prefix~. (installed)

*** TODO org-transclusion                                     :considering:
[[https://github.com/nobiot/org-transclusion][org-transclusion]]

*** TODO zk.el                                                :considering:

- https://github.com/localauthor/zk
- [[https://melpa.org/#/zk][MELPA]], [[https://www.youtube.com/watch?v=BixlUK4QTNk][Video]]

** Editing Utilities

*** [[https://joaotavora.github.io/yasnippet/index.html][YASnippet]]                                                   :installed:

Expanding a YASnippet requires the ~yas-minor-mode~ + ~xxx-mode~ (major mode). The ~xxx-mode~ must match a directory in:

#+begin_src emacs-lisp :tangle no
yas-snippet-dirs
#+end_src

#+RESULTS:
| /home/schmudde/.emacs.d/snippets |

For example, the currently supported modes include:

#+begin_src bash
ls /home/schmudde/.emacs.d/snippets
#+end_src

#+RESULTS:
| clojure-mode  |
| markdown-mode |
| org-mode      |

[[https://github.com/AndreaCrotti/yasnippet-snippets/tree/master/snippets][The project repo]] is a great snippet resource. Add them and then evaluate ~yas-reload-all~.

*** Multiple Cursors                                              :installed:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-}") 'mc/mark-next-like-this)
(global-set-key (kbd "C-{") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-x C-m C-c") 'mc/edit-lines)
#+END_SRC

*** undo-tree                                                   :considering:

#+BEGIN_SRC emacs-lisp :tangle no
(global-undo-tree-mode)
(global-set-key (kbd "M-/") 'undo-tree-visualize)
#+END_SRC

** Programming Utilities

*** Restclient                                                     :installed:

Also installed: ~ob-restclient.el~ for Emacs Restclient support in [[https://github.com/alf/ob-restclient.el][org-babel]]. Header arguments for ~:results~: ~raw|value|pure|table~

*** Clojure

- :considering:
    - ~helm-cider~
    - ~ivy-cider~

**** Smartparens                                             :considering:
[[https://github.com/Fuco1/smartparens/wiki/Paredit-and-smartparens][
Smartparens (installed) vs. Paredit]]

"By default smartparens is much less strict about the 'balancedness' of the buffer and it usually allows you to delete whatever you please. However, there are settings (like smartparens-strict-mode) you can use to have it behave more like paredit."

**** Paredit                                                      :installed:

I want to select forms and delete them in Paredit. Setting the delete key has been a bit tricky.

~C-h b~: input decoding map translations:

- Key: ~M-[ 3 ; 5 ~~
- Binding: ~<C-delete>~

For example, ~M-O A~ will move the cursor ~<up>~.

For the binding, I have tried ~(kbd "\e[3;5~")~ from the function key sequences for xterm for /C-del/: ~(define-key map "\e[3;5â€‹~" [C-delete])~ in ~/usr/share/emacs/27.1/lisp/term~ as well as ~(kbd "M-[ 3 ; 5 ~")~ from the input decoding map translations above.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<C-delete>") 'paredit-delete-region)
(add-hook 'cider-mode-hook #'enable-paredit-mode)
(add-hook 'cider-repl-mode-hook #'enable-paredit-mode)
(define-key org-mode-map (kbd "M-P") 'paredit-mode) ;; toggle paredit mode manually
#+END_SRC

**** [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]] and [[https://github.com/clojure-emacs/cider][cider]]                                       :installed:
**** [[https://github.com/clojure-emacs/clj-refactor.el][clj-refactor]]                                                 :installed:

#+BEGIN_SRC clojure
(require 'clj-refactor)

(defun my-clojure-mode-hook ()
    (clj-refactor-mode 1)
    (yas-minor-mode 1) ; for adding require/use/import statements
    ;; This choice of keybinding leaves cider-macroexpand-1 unbound
    (cljr-add-keybindings-with-prefix "C-c C-m"))

(add-hook 'clojure-mode-hook #'my-clojure-mode-hook)
#+END_SRC

** Productivity

*** [[https://git.zx2c4.com/password-store/tree/contrib/emacs][password-store]]                                                :installed:

Works with the [[https://www.passwordstore.org/][pass]] Linux password manager, which must be installed for this to work.

Examples:

#+BEGIN_SRC
M-x password-store-insert
Password entry: foo-account
Password: ........
Confirm password: ........
#+END_SRC

Copied password for foo-account to the kill ring. Will clear in 45 seconds.

#+BEGIN_SRC
M-x password-store-copy
Password entry: services/github
#+END_SRC

List passwords on the command line using ~pass~ and then use ~password-store-edit~ -> ~muw/schmudde@yorba.co~ to update the password.

*** Calendar with [[https://github.com/kiwanami/emacs-calfw][Calfw]]                                           :installed:

#+BEGIN_SRC emacs-lisp
  (require 'calfw-ical)
  ;; IndieWeb @ https://events.indieweb.org/
  ;; (cfw:open-ical-calendar "https://events.indieweb.org/ics/events.ics")

  ;; (cfw:open-ical-calendar "https://dweb.events/feed.ics")
#+END_SRC

* Starting Emacs and Emacs Server

I like to have a single instance of Emacs running and open up multiple clients. The following tips are courtesy of [[https://github.com/susam/emfy#emacs-server][Susam]].

#+begin_src emacs-lisp
(require 'server)

(unless (server-running-p)
  (server-start))
#+end_src

~server-running-p~ returns ~t~ or ~nil~ depending on the state of the server; it needs the ~server~ package.

- ~emacsclient foo.txt bar.txt~: blocks the terminal until finished editing. When we are done editing a file, we must type C-x # to tell Emacs to switch to the next file.
- ~emacsclient -n foo.txt bar.txt~: opens files in the existing Emacs instance but does not wait for us to finish editing.

The ~em~ bash script modifies [[https://github.com/susam/emfy#emacs-server][Susam]]'s original.

If ~em~ is run without arguments, try to start an ~emacsclient~. The bash script will end here if there is an Emacs process with a server running.

#+begin_src bash :results silent :tangle em
# Do not edit this file. It is tangled from
# Link on your $PATH. In my case it's
# ln -s /home/schmudde/.local/bin
#!/bin/sh
if [ "$#" -eq 0 ]
then
    echo "Starting an Emacs client ..." >&2
    if emacsclient -nw 2> /dev/null
    then
        echo "Opened $@ in Emacs client" >&2
        emacsclient -nw
    else
        echo "Starting new Emacs process ..." >&2
        emacs -nw
    fi
fi
#+end_src

If no Emacs process exists, ~emacsclient~ will not run. The next test conditions are considered:

1. If there are no arguments to ~em~ start an Emacs process.
2. If there are arguments to ~em~, try starting an ~emacsclient~ with those arguments.
3. If there are arguments to ~em~ and no Emacs process, start an Emacs process with those arguments.

#+begin_src bash :results silent
#!/bin/sh
if [ "$#" -eq 0 ]
then
    echo "Starting new Emacs process ..." >&2
    emacs -nw
elif emacsclient -nw "$@" 2> /dev/null
then
    echo "Opened $@ in Emacs server" >&2
else
    echo "Opening $@ in a new Emacs process ..." >&2
    emacs -nw "$@"
fi
#+end_src

* Interface Improvements

I use the Emacs Web Wowser quite a bit, so I want to customize the search engine. When in EWW: ~M-x customize-mode~ &rarr; /Eww Search Prefix/ &rarr; ~https://html.duckduckgo.com/html?q=~

"/usr/share/applications/firefox.desktop"

I like having the day, date, and time displayed in my modeline.

#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t)
(display-time-mode 1)
#+END_SRC

For the time being, simply use one of the default color themes. Can use ~M+x customize-theme~ to change themes.

#+BEGIN_SRC emacs-lisp
(load-theme 'wheatgrass)
#+END_SRC

I like to use the ~menu-bar-mode~, ~menu-bar-open~ (~F10~) when I forget commands. But the default colors don't really work. They are in two different places:

1. ~M-x customize-face RET menu RET~ to set the menu bar itself
2. Use TTY settings to set the colors of the pull downs themselves:
    - With ~customize-face~: ~tty-menu-disabled-face~, ~tty-menu-enabled-face~, ~tty-menu-selected-face~
    - Or in Lisp: ~(set-face-attribute 'tty-menu-enabled-face  nil :background "black" :foreground "white")~

** [[https://github.com/justbur/emacs-which-key][which-key]]                                                     :installed:

~C-x~ and wait for the default of 1 second the minibuffer will expand with all of the available key bindings that follow ~C-x~ (or as many as space allows given your settings). This includes prefixes like ~C-x 8~ which are shown in a different face.

#+begin_src emacs-lisp
(which-key-mode)
(which-key-setup-side-window-right)
#+end_src

* Org Agenda

#+begin_src emacs-lisp
org-todo-keywords
#+end_src

#+RESULTS:
| sequence | TODO | DOING | DONE |

#+begin_src emacs-lisp
(global-set-key (kbd "<f3>") 'org-agenda)
#+end_src

* Editing Helpers

Enable the upcase-region function. I still have no idea why this is disabled by default.

#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
#+END_SRC

Whenever we visit a buffer that has no active edits, but the file has changed on disk, automatically reload it.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Whenever the cursor is on a paren, highlight the matching paren.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

Remove [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Bidirectional-Editing.html][Bidirectional Editing]], text and code by [[https://github.com/munen/emacs.d][Munen]]

Emacs supports editing text written in scripts, such as Arabic, Farsi, and Hebrew, whose natural ordering of horizontal text for display is from right to left. However, digits and Latin text embedded in these scripts are still displayed left to right.

Whilst this is a great feature, it adds to the amount of line scans that Emacs has to do to render a line. Too many line scans will cause Emacs to hang. Since I personally do not work with right-to-left languages, Iâ€™m defaulting to displaying all paragraphs in a left-to-right manner.

#+BEGIN_SRC emacs-lisp
(setq-default bidi-paragraph-direction 'left-to-right)

(if (version<= "27.1" emacs-version)
    (setq bidi-inhibit-bpa t))
#+END_SRC

[[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Mark][The Mark and the Region]]

#+BEGIN_SRC emacs-lisp
(transient-mark-mode 1)
(delete-selection-mode t) ;; delete the selection with a keypress
#+END_SRC

[[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Indentation][Indentation]]

#+BEGIN_SRC emacs-lisp
;; keep my code tidy
(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)
;; ?? (setq-default tab-width 8) ;; but maintain correct appearance
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Translations

Multi-Language Options:

- https://www.emacswiki.org/emacs/TextTranslator
- [[https://github.com/atykhonov/google-translate][Emacs interface to Google Translate]]
- [[https://github.com/lorniu/go-translate][Go-Translate]] (used here)

*** Italian

[[https://github.com/muqiuhan/emacs-comment-trans.el][Emacs Comment Translate]] 0.5.0 has a dependency on translate-shell, which can be installed via ~sudo apt install translate-shell~.

#+begin_src emacs-lisp
  (load "~/.emacs.d/site-lisp/comment-translate.el")

  (setq-default translate-shell-path "/usr/bin/trans"
                target-language "it"
                source-language "en"
                comment-translate-selected-color "red")

  (defvar default-translate-languages '(("it" "en")
                                        ("en" "it"))
    "Translate source-language to target-language list by default.")

  (global-set-key (kbd "C-c s t") 'translate-select-string)
#+end_src

#+begin_src emacs-lisp
(require 'go-translate)
  (setq gts-translate-list '(("it" "en")))
  (setq gts-default-translator
       (gts-translator
        :picker (gts-prompt-picker)
        :engines (list (gts-google-engine) (gts-google-rpc-engine))
        :render (gts-buffer-render)))
#+end_src

And start your translate with command ~gts-do-translate~.

*** German


[[https://github.com/munen/emacs.d#translations][dict.cc elisp wrapper]] by Alain M. Lafon. Just ~M-x dict~ to translate a word at a point.

#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/dict")
#+END_SRC

** Text Expansion

/[[https://www.masteringemacs.org/article/text-expansion-hippie-expand][Hippie Expand]]/ > /Dynamic Abbrev/

#+begin_src emacs-lisp
(global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src

~M-/~ expands the things it has seen in:

- File Names and Paths in any buffer
- A repeated line from earlier
- Lisp lists
- Switches/keywords in ~eshell~/~shell~
- Stuff from the Kill Ring

* Programming

** LSP Mode                                                      :installed:

Install the [[https://clojure-lsp.io/][clojure-lsp]] GraalVM native executable for Linux

- Script: ~sudo bash < <(curl -s https://raw.githubusercontent.com/clojure-lsp/clojure-lsp/master/install)~ will install ~clojure-lsp~ in ~/usr/local/bin~
- Native binary (recommended): The binaries are available on [[https://github.com/clojure-lsp/clojure-lsp/releases][Github releases]] as ~clojure-lsp-native-<os>-<arch>.zip~, after downloading you just need to unzip it. Tried: [[https://github.com/clojure-lsp/clojure-lsp/releases/download/2022.11.03-00.14.57/clojure-lsp-native-linux-amd64.zip][clojure-lsp-native-linux-amd64.zip]]

#+begin_src bash
whereis clojure-lsp
#+end_src

#+RESULTS: clojure-lsp-path
: clojure-lsp: /usr/local/bin/clojure-lsp

To configure Emacs to use the nREPL-enabled executable, run ~(setq lsp-clojure-custom-server-command '("/usr/local/bin/clojure-lsp"))~. Look for lsp-mode variable to customize server path. Usually, you may find the variable by doing: ~M-x customize-group~ RET ~lsp-clojure-mode~.

Now it's possible to explore a Clojure codebase without having to start a REPL. You can essentially do anything besides evaluation. ~clojure-lsp~ uses ~clj-kondo~ under the hood to do the linting.

Other commands

- Restart the clojure-lsp server, execute: ~lsp-workspace-restart~.
- Server info: ~lsp-clojure-server-info~
- To connect the nREPL client, run ~cider-connect-clj~, with "localhost" and the port.
- ~i~: when it's your own project
- ~n~: when it's a library. It may even write the stuff to a .jar
- ~lsp-describe-session~: what projects does the server work with?

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook ((clojure-mode . lsp)
           (typescript-mode . lsp)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;;(use-package lsp-ui
  ;;  :commands lsp-ui-mode)
#+end_src

** Typescript                                                    :installed:

~typescript-mode~:

Use ~ts-ls~ as language server

#+begin_src :tangle variable :

#+end_src

** SX                                                           :considering:

Stack Exchange

** Settings

Tell ~python-mode~ to use Python 3

#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python3")
#+END_SRC

** [[https://www.emacswiki.org/emacs/HideShow][Hide Show]]

Considering these bindings:

 (global-set-key (kbd "M-+") 'hs-show-block)
 (global-set-key (kbd "M-*") 'hs-show-all)
 (global-set-key (kbd "M--") 'hs-hide-block)
 (global-set-key (kbd "M-Ã‡") 'hs-hide-level)
 (global-set-key (kbd "M-:") 'hs-hide-all)

Load it in ~clojure-mode~ or ~cider-mode~:

#+begin_src emacs-lisp
  (add-hook 'clojure-mode-hook 'hs-minor-mode)
  (add-hook 'cider-mode-hook 'hs-minor-mode)
#+end_src

** Literate Programming in org-babel

~emacs-lisp~ works by default. Bash as well.

#+begin_src bash
ls b*
#+end_src

#+RESULTS:
: bookmarks

Stop Emacs asking for confirmation to evaluate:

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Add ~(require 'org-tempo)~ to enable ~<s TAB~ code block shortcut.

#+BEGIN_SRC emacs-lisp :results silent
(org-babel-do-load-languages
 'org-babel-load-languages '((emacs-lisp . t)
                             (clojure . t)
                             (python . t)
                             (restclient . t)
                             (shell . t)))

(require 'org-tempo)
#+END_SRC

#+BEGIN_SRC python :tangle no
return 3 + 7
#+END_SRC

#+RESULTS:

*** Clojure

From the documentation, [[https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-clojure.html][Clojure in Org Mode Babel]]:

#+BEGIN_SRC emacs-lisp :results silent
;; Clojure
(require 'org)
(require 'ob-clojure)
;; Cider
(setq org-babel-clojure-backend 'cider)
(require 'cider)
#+END_SRC

* Fill Paragraphs and Word Frequency

[[https://www.emacswiki.org/emacs/UnfillParagraph ][Unfill Paragraph]] by Stefan Monnier <foo at acm.org>. It is the opposite of ~fill-paragraph~ (~M-q~).

#+BEGIN_SRC emacs-lisp
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))
#+END_SRC

Handy key definition for ~unfill-paragraph~.

#+BEGIN_SRC emacs-lisp
(define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC

A very basic word count analysis [[https://www.emacswiki.org/emacs/WordCount][from the EmacsWiki]] that I need to enhance.

#+begin_src emacs-lisp
  (defun word-count-analysis (start end)
    "Count how many times each word is used in the region.
  Punctuation is ignored."
    (interactive "r")
    (let (words)
      (save-excursion
        (goto-char start)
        (while (re-search-forward "\\w+" end t)
          (let* ((word (intern (match-string 0)))
                 (cell (assq word words)))
            (if cell
                (setcdr cell (1+ (cdr cell)))
              (setq words (cons (cons word 1) words))))))
      (when (interactive-p)
        (message "%S" words))
      words))
#+end_src

* eMail

All about [[[https://www.djcbsoftware.nl/code/mu/mu4e/Contexts.html][contexts]]: I have different e-mail accounts for private and work email, each with their own values for folders, e-mail addresses, mailservers and so on. Use ~;~ to switch contexts in mu4e.

~M-x mu4e-news~ (currently version 1.6) to see the [[https://github.com/emacsmirror/mu4e/blob/master/NEWS.org][NEWS (user visible changes & bigger non-visible ones)]]. See also the [[https://github.com/djcb/mu/releases][Release log]].

#+begin_src bash :results drawer
mu --version
#+end_src

#+RESULTS:
:results:
mu (mail indexer/searcher) version 1.6.10
Copyright (C) 2008-2021 Dirk-Jan C. Binnema
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
:end:

** Using mu-wizard                                                :installed:

Dependencies

1. [[https://github.com/cemkeylan/mu-wizard/][mu-wizard]]: shell script to setup mu4e for Emacs
2. [[https://www.passwordstore.org/#extensions][pass]] (via ~apt~) for passwords
3. isync (via ~apt~) for offline mail storage
    - see also [[http://isync.sourceforge.net/][isync main]], [[https://wiki.archlinux.org/title/Isync][isync on Arch Linux]]
    - ~mbsync -a~: update each folder
    - while isync is the project name, mbsync is the current executable name; this change was necessary because of massive changes in the user interface.
4. mu (install ~mu4e~ via ~apt~)
    - Mu4e and mu need to stay in sync, so it's best to use the package manager for both.
    - Maildir-utils might be better depending on your distribution, see also [[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu/mu4e]]
5. msmtp (via ~apt~) for sending mails
6. altermime (via ~apt~) for [[https://emacs.stackexchange.com/a/23815][deleting attachments]]
7. [[https://xapian.org/][Xapian]] (install ~libxapian-dev~ via ~apt~) is an Open Source Search Engine Library
8. [[https://github.com/jwiegley/use-package][use-package]] (via MELPA)

Commands

1. ~muw add~: a script that walks you through adding a new eMail config to
2. ~muw sync personal~ where ~personal~ is an account name
3. ~muw mu-init~ to setup database store
4. ~mu index~ to index for search (Xapian), also to rebuild the index

Gmail

1. Make sure to turn on Less Secure Apps under Google Account -> [[https://myaccount.google.com/security][Security]]
2. If you use 2-Step-Verification and get a "password incorrect" error when you sign in, you can try to [[https://support.google.com/accounts/answer/185833][use an App Password]].

#+BEGIN_SRC shell :results drawer
muw list
#+END_SRC

#+RESULTS:
:results:
personal
yorba
:end:

Lisp Code

#+BEGIN_SRC emacs-lisp
(load-file "~/.config/mu4e/mu4e-config.el")

(add-to-list 'load-path "~/.config/mu4e")
(require 'mu4e-config)

(use-package mu4e-config
  :after mu4e
  :load-path "~/.config/mu4e")

;; mu4e does not by default rename files when moving them to a new directory and this then causes problems for mbsync.
(setq mu4e-change-filenames-when-moving t)

; mu4e defaults to plain text eMails with the original 79 character limit.
; Set this so plain text eMails should flow correctly for recipients
(setq mu4e-compose-format-flowed t)

;; (setq mu4e-view-use-old t)

;; custom preferences
(setq mu4e-update-interval (* 7 60)) ; refresh every 420 seconds/7 minutes
;; (setq mu4e-maildir-shortcuts '(("/personal/INBOX.Personal" . ?p)
;;                               ("/personal/INBOX" . ?i)))
(global-set-key (kbd "C-c m") 'mu4e)
(local-set-key (kbd "<f5>") 'mu4e-view-save-attachment)

;; Let's turn this into a task in org mode!
(global-set-key (kbd "C-c i") 'mu4e-org-store-and-capture)
#+END_SRC

Other than ~"~/.config/mu4e/mu4e-config.el"~, configuration files are also found in ~"~/.config/mu4e/accounts/personal.el"~. This is where I've moved ~(setq mu4e-compose-signature "w: http://schmud.de\ne: d@schmud.de\nt: @dschmudde")~

#+BEGIN_SRC shell :results drawer
mu info
#+END_SRC

#+RESULTS:
:results:
maildir           : /home/schmudde/.local/share/mail
database-path     : /home/schmudde/.cache/mu/xapian
schema-version    : 452
max-message-size  : 100000000
batch-size        : 250000
messages in store : 31024
created           : Sat 23 Jul 2022 06:35:11 PM CEST
personal-address  : d@schmud.de
personal-address  : schmudde@yorba.co
:end:

database-path      : /home/schmudde/.cache/mu/xapian
messages in store  : 26279
schema-version     : 451
created            : Mon 04 Oct 2021 04:08:51 PM CEST
maildir            : /home/schmudde/.local/share/mail
personal-addresses : d@schmud.de
                     schmudde@yorba.co

** Attachments (MIME parts)

MIME-part actions allow you to act upon MIME-parts in a message - such as attachments. For now, these actions are defined and documented in ~mu4e-view-mime-part-action~, bound to ~A~.

mu4e v1.6 uses the gnus-based message viewer as the default, which includes support for S/MIME.

For .pdfs: ~open-with~ function mapped to ~A~ /attachment number/ ~w~ ~okular~.

- Preferred (see scripts below)
    - ~C-c D~: ~timu/mu4e-view-save-attachment~
    - ~C-c A~: ~timu/mu4e-view-save-attachments~
- ~e~, ~mu4e-view-save-attachments~: extract (save) mime parts from current mu4e gnus view buffer. (asks for numbers).
- ~a~: execute some custom action on the message
- ~A~, ~mu4e-view-mime-part-action~: execute some custom action on the message's MIME-parts ~3 A o~ opens the third MIME-part.
- The gnus-based view is deceitful.
    - The ~o~ binding works when the cursor is over the attachment.
    - Move the cursor over the file with the cursor S-return runs the command ~mu4e~view-save-attach-from-binding~
- While the cursor is on the MIME part, the options change a bit
    - ~i~: open in internal editor (useful for text MIME parts when the rendering sucks)
    - ~e~: open in external editor

Save attachments changed quite a bit with the mu/mu4e 1.6 updates. Thankfully AimÃ© Bertrand wrote and updated [[https://macowners.club/posts/mu4e-save-attachments-faster-with-ivy/#edits][Mu4E - Save attachments faster with ivy]]. Here are the functions they provide using the new ~gnus-article-mode~.

#+begin_src emacs-lisp
  (defun timu/mu4e-view-save-attachments ()
    "Save All Attachements in a selected directory using completion.
  This is a modified version of `mu4e-view-save-attachments'."
    (interactive)
    (cl-assert (and (eq major-mode 'mu4e-view-mode)
                    (derived-mode-p 'gnus-article-mode)))
    (let* ((parts (mu4e~view-gather-mime-parts))
           (handles '())
           (files '())
           dir)
      (dolist (part parts)
        (let ((fname (cdr (assoc 'filename (assoc "attachment" (cdr part))))))
          (when fname
            (push `(,fname . ,(cdr part)) handles)
            (push fname files))))
      (if files
          (progn
            (setq dir (read-directory-name "Save to directory: "))
            (cl-loop for (f . h) in handles
                     when (member f files)
                     do (mm-save-part-to-file h (expand-file-name f dir))))
        (mu4e-message "No attached files found"))))

  (global-set-key (kbd "C-c A") 'timu/mu4e-view-save-attachments)
#+end_src

#+begin_src emacs-lisp
  (defun timu/mu4e-view-save-attachment ()
    "Save one attachement in a selected directory using completion.
  This is a modified version of `mu4e-view-save-attachments'."
    (interactive)
    (cl-assert (and (eq major-mode 'mu4e-view-mode)
                    (derived-mode-p 'gnus-article-mode)))
    (let* ((parts (mu4e~view-gather-mime-parts))
           (handles '())
           (files '())
           dir)
      (dolist (part parts)
        (let ((fname (cdr (assoc 'filename (assoc "attachment" (cdr part))))))
          (when fname
            (push `(,fname . ,(cdr part)) handles)
            (push fname files))))
      (if files
          (progn
            (setq files (completing-read-multiple "Save part(s): " files)
                  dir (read-directory-name "Save to directory: "))
            (cl-loop for (f . h) in handles
                     when (member f files)
                     do (mm-save-part-to-file h (expand-file-name f dir))))
        (mu4e-message "No attached files found"))))

  (global-set-key (kbd "C-c D") 'timu/mu4e-view-save-attachment)
#+end_src

It's important that I can delete large, superfluous attachments. No reason to keep them around year after year. Thankfully, I found this bit of Elisp code [[https://emacs.stackexchange.com/a/23815][on Stackexchange]]. Depends on altermime.

But the gnus-based message view update in v1.6 of mu/mu4e provides a broken built-in function, ~gnus-mime-delete-part~, that gives this error message: /The current group does not support deleting of parts/. It seems like an issue with [[https://mail.gnu.org/archive/html/emacs-diffs/2021-01/msg00681.html][a setting]]: ~(when (gnus-group-read-only-p) (error "The current group does not support deleting of parts"))~?

Luckily there seems to be [[https://emacs.stackexchange.com/a/70992/11015][a solution]]. Note: the header listing the attachments is not updated but when you leave the email and reopen it, the attachment is gone

#+begin_src emacs-lisp
  (defun my-mime-part-filename (num)
    "Filename of MIME part numbered num in gnus-article-mode."
    ;; Check whether the specified part exists.
    (when (> num (length gnus-article-mime-handle-alist))
      (error "No such part"))
    ;; Move point to MIME part
    (when (gnus-article-goto-part num)
      ;; Get handle for MIME part at point
      (let ((handle (get-text-property (point) 'gnus-data)))
        (when handle
          ;; Return file name of handle
          (mm-handle-filename handle)
          ))))

  (defun my-delete-attachment (num)
    "Remove email attachment from mu4e using altermime."
    (let* ((path (mu4e-message-field (mu4e-message-at-point) :path))
           (filename (my-mime-part-filename num))
           (cmd (format "altermime --input='%s' --remove='%s'"  path filename)))
      (when (and filename
                 (yes-or-no-p
                  (format "Remove '%s'?" filename)))
        (shell-command cmd)
        (mu4e-message cmd)
        )))

  (defun my-delete-all-attachments (msg)
    "Remove all email attachments in mu4e using altermime."
    (let* ((path (mu4e-message-field msg :path))
           (subject (mu4e-message-field msg :subject))
           (cmd (format "altermime --input='%s' --removeall"  path)))
      (when (yes-or-no-p
             (format "Remove all attachments from '%s'?" subject))
        (shell-command cmd)
        (mu4e-message cmd)
        )))

  (add-to-list 'mu4e-view-mime-part-actions
               '(:name "delete-attachment"
                       :handler my-delete-attachment
                       :receives index))

  (add-to-list 'mu4e-headers-actions
               '("Delete-all-attachments" . my-delete-all-attachments))
#+end_src

Where are attachments, anyway?

#+BEGIN_SRC emacs-lisp
mu4e-attachment-dir
#+END_SRC

#+RESULTS:
: /home/schmudde/

While I'm making attachments better, mark the file(s) in dired you would like to attach and press ~C-c RET C-a~ or use ~gnus-dired-attach~ on each file. Via the docs: File: mu4e.info, Node: Dired.

#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
#+END_SRC

Where do attachments open?

#+begin_src bash
xdg-mime query default application/pdf
#+end_src

#+RESULTS:
: okularApplication_pdf.desktop

Unfortunately it's not that easy. PDFs currently open in my eReader.

** org-msg                                                     :considering:

OrgMsg is a GNU/Emacs global minor mode mixing up Org mode and your Mail User Agent Mode to compose and reply to emails in a HTML friendly style.

** Troubleshooting, Breaking Changes, and Recovery

The server protocol (as used by mu4e) often does not offer compatibility between minor release numbers (1.4 vs 1.6 vs 1.8) nor within development series (such as 1.7). However, within a stable release (such as all 1.6.x) the protocol wonâ€™t change (except if required to fix some severe bug; this never happened in practice). To understand what's happening within each release, refer to [[https://github.com/emacsmirror/mu4e/blob/master/NEWS.org][NEWS (user visible changes & bigger non-visible ones)]].

*Recovery Tips*

- ~Error (mu4e): expected schema-version 452, but got 451; please use 'mu init'~
- When the database schema of mu changes, run ~muw mu-init~ to reindex the database. For example, when upgrading from 1.6.1 to 1.6.2+.

*UID Errors*

If you encounter UID errors (e.g. /Maildir error: duplicate UID 15/) use the tips suggested by [[http://tiborsimko.org/mbsync-duplicate-uid.html][Troubleshooting Mbsync Duplicate UID Errors]]:

- ~ls -lR cur | grep -o 'U=.*:' | sort | uniq -d~: find the duplicates in ~cur~
- ~find . -name "*U=2:*" -exec ls -l {} \;~ &rArr; ~./cur/1419106858.5661_2.pcuds06,U=2:2,S~ &amp; ~/cur/1423819205.29514_1.pcuds06,U=2:2,S~
- ~mv ./cur/1423819205.29514_1.pcuds06,U=2:2,S ./cur/1423819205.29514_1.pcuds06~: This deduplicates the problematic UID and forces mbsync to create new UID for the second message at its next run.
- ~mbsync -a | grep -i error | wc -l~

** Other Approaches

- System Crafters videos: [[https://youtu.be/WiyqU7gmKsk][A good intro to eMail in Emacs video]], [[https://www.youtube.com/watch?v=yZRyEhi4y44][Streamline Your E-mail Management with mu4e]]
- [[https://github.com/Ebert-Hanke/emacs#email-in-emacs][Guide to Guides]]
- [[https://github.com/munen/mu4e-views][mu4e Views]]
- [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/][Link to A Complete Guide to Email in Emacs using Mu and Mu4e]]
- [[https://emacs.stackexchange.com/questions/12927/reading-and-writing-email-with-emacs][Stack Exchange overview]]
- [[https://chrisdone.com/posts/emacs-mail/][Emacs, Notmuch and Offlineimap]]
- [[https://rakhim.org/fastmail-setup-with-emacs-mu4e-and-mbsync-on-macos/][Fastmail setup with Emacs, mu4e and mbsync on macOS]]

* Resources

Install the missing manual because of an ~Info-find-file: Info file emacs does not exist~ error. Run ~apt-get install emacs-common-non-dfsg~ [Emacs 26.1]+ package (Debian).

- Inspiring literate GNU Emacs Configuration File
    - Seth Morabito's literate [[https://github.com/sethm/emacs-files/blob/master/configuration.org][GNU Emacs Configuration File]]
    - Alain M. Lafon's [[https://github.com/munen/emacs.d][Play Emacs Like an Instrument]]
    - Colin McLear's [[https://github.com/mclear-tools/dotemacs][Emacs for Academic Writing]], [[https://github.com/mclear-tools/dotemacs][post]]
    - Collections of configs
        - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
        - [[https://github.com/caisah/emacs.dz][Starter packs/defaults]]
        - [[https://www.reddit.com/r/emacs/comments/qa6tgk/your_first_taste_of_emacs_the_beginners_guide_i/][Beginner's Guide I Wish I Had]]
    -  A minimum-viable [[https://gist.github.com/adam-james-v/7a61612ce0649afc78513f54b337d8c9][emacs config]] for literate programming with Clojure by Adam James ([[https://www.youtube.com/watch?v=bhNvwxFV5vU][video]])
- Inspiring Blog Posts
    - [[https://dev.to/matheusemm/simple-emacs-configuration-for-clojure-development-11i3][Simple Emacs configuration for Clojure development]]
    - [[https://karthinks.com/software/batteries-included-with-emacs/][Batteries Included With Emacs]]
- [[https://github.com/alphapapa/unpackaged.el][Unpackaged]]: A collection of useful Emacs Lisp code that isnâ€™t substantial enough to be packaged.
- Org Mode Babel: [[https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.md][tangling/evaluating/weaving]]
- Documentation
    - [[https://emacsdocs.org/][Emacs Docs]]
    - [[https://emacs.sexy/][Emacs is Sexy]]

* Miscellaneous Notes

I find printing a default message in the empty scratch buffer opened at startup occasionally useful for testing.

~(setq initial-scratch-message "Welcome in Emacs")~

[[https://github.com/github/markup][Github markup]] uses [[https://github.com/wallyqs/org-ruby][org-ruby]] to convert org-mode to HTML. It supports footnotes and some custom markup.

[[file:https://readme-jokes.vercel.app/api]]

** Key Bindings

[[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs]]

> One important point to note is that you must surround function and navigation keys with < and >. Those keys include F-keys, arrow keys and home row keys, like so: <home>, <f8> and <down>. But if you want represent the key C-c p then write (kbd "C-c p").

** org-mode tips

[[https://orgmode.org/manual/Escape-Character.html][Escape Character]]

You may sometimes want to write text that looks like Org syntax, but should really read as plain text. Org may use a specific escape character in some situations, i.e., a backslash in macros (see Macro Replacement) and links (see Link Format), or a comma in source and example blocks (see Literal Examples). In the general case, however, we suggest to use the zero width space. You can insert one with any of the following:

- ~C-x 8 <RET> zero width space <RET>~
- ~C-x 8 <RET> 200B <RET>~

** TODO

- [[https://www.emacswiki.org/emacs/InfoPath][Set info-path for org-mode documentation]] (currently broken)
- [[https://awesomeopensource.com/project/nobiot/org-transclusion?mode=...][Transclusions]]
