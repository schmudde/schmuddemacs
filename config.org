Welcome to Schmuddemacs!

My GNU Emacs configuration file is written to help me remember all the small decisions I made along the way and as a guide for any souls who might stumble upon this page.

Software updates will inevitably break existing configurations. I have often revisited a relevant snippet of Emacs Lisp code with a pithy comment and felt lost. The /Literate Programming/ style offers more context. After all, code was written primarily for humans to read, including all future Schmuddes, and only incidentally for machines to interpret.

Code evaluation is provided by ~org-babel~, which provides a method for extracting and evaluating Emacs Lisp expressions inside an org-mode file.

This is currently loaded by my ~init.el~ using ~(org-babel-load-file (concat user-emacs-directory "config.org"))~. This README is a symlink to ~config.org~.

The move to Org Mode is currently a work in progress!

[[under-construction.gif]]

* Package Overview

Come winter, having a snow in my Emacs is an absolute necessity. ~snow.el~ is available in [[https://melpa.org/#/snow][MELPA]] or on [[https://github.com/alphapapa/snow.el][GitHub]]. Download the file, ~curl -O https://raw.githubusercontent.com/alphapapa/snow.el/master/snow.el~, open it in a buffer, ~eval-buffer~, and ~M-x snow RET~.

** Movement Utilities

- TODO: also: avy - company - [[https://depp.brause.cc/nov.el/][nov.el]]

- [[https://github.com/nonsequitur/smex][smex]], a package that improves the use of M-x. TODO: to use everywhere ~(global-set-key (kbd "M-x") 'smex)~
- [[https://github.com/bbatsov/projectile][projectile]] to help navigate between files in a project.

*** Completion Frameworks

**** Helm: filter-as-you-type completion                        :considering:

For in-depth searching and completion.

- Install via the package manager
- ~C-x c~: prefix for all Helm commands
- see also:
    - helm-rg
    - [[https://github.com/bbatsov/helm-projectile][helm projectile]]: ~helm-projectile-grep~, ~helm-projectile-find-file~

#+BEGIN_SRC emacs-lisp :tangle no
(require 'helm)

(setq-default helm-M-x-fuzzy-match t)
(global-set-key "\C-x\C-m" 'helm-M-x)
(global-set-key "\C-c\C-m" 'helm-M-x)
#+END_SRC

**** IDO                                                          :installed:

[[https://www.masteringemacs.org/article/introduction-to-ido-mode][Interactively DO Things]]

Improvements over Emacs' TAB-based completion.

- ~C-s~ and ~C-r~: Move to the next and previous match
- ~C-d~ Open ~M-x dired~ buffer in current directory

#+BEGIN_SRC emacs-lisp
(require `ido)
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

~Ido-Everywhere~ minor mode: Toggle use of Ido for all buffer/file reading (~C-x C-f~, ~C-x d~, and ~C-x b~).

*** Markdown Mode                                                 :installed:

- ~[[https://elpa.gnu.org/packages/adaptive-wrap.html][adaptive-wrap]]~: ensures that outlines wrap lines correctly with ~wrap-prefix~. (installed)

** Editing Utilities

;; TODO: - hydra - yasnippet (I see enough patterns that I create snippets for) - iedit, [[https://github.com/abo-abo/plain-org-wiki][plain-org-wiki]]

*** Multiple Cursors                                              :installed:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-}") 'mc/mark-next-like-this)
(global-set-key (kbd "C-{") 'mc/mark-previous-like-this)
#+END_SRC

*** undo-tree                                                   :considering:

#+BEGIN_SRC emacs-lisp :tangle no
(global-undo-tree-mode)
(global-set-key (kbd "M-/") 'undo-tree-visualize)
#+END_SRC

** Programming Utilities

*** Restclient                                                    :installed:
*** Smartparens                                                   :installed:
[[https://github.com/Fuco1/smartparens/wiki/Paredit-and-smartparens][
Smartparens (installed) vs. Paredit]]

"By default smartparens is much less strict about the 'balancedness' of the buffer and it usually allows you to delete whatever you please. However, there are settings (like smartparens-strict-mode) you can use to have it behave more like paredit."

*** Clojure

- :considering:
    - ~helm-cider~
    - ~ivy-cider~

**** [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]] and [[https://github.com/clojure-emacs/cider][cider]]                                       :installed:
**** [[https://github.com/clojure-emacs/clj-refactor.el][clj-refactor]]                                                 :installed:

#+BEGIN_SRC clojure
(require 'clj-refactor)

(defun my-clojure-mode-hook ()
    (clj-refactor-mode 1)
    (yas-minor-mode 1) ; for adding require/use/import statements
    ;; This choice of keybinding leaves cider-macroexpand-1 unbound
    (cljr-add-keybindings-with-prefix "C-c C-m"))

(add-hook 'clojure-mode-hook #'my-clojure-mode-hook)
#+END_SRC

** Productivity

*** Calendar with [[https://github.com/kiwanami/emacs-calfw][Calfw]]                                           :installed:

#+BEGIN_SRC emacs-lisp
  (require 'calfw-ical)
  ;; IndieWeb @ https://events.indieweb.org/
  (cfw:open-ical-calendar "https://events.indieweb.org/ics/events.ics")

  (cfw:open-ical-calendar "https://dweb.events/feed.ics")
#+END_SRC

* Interface Improvements

I use the Emacs Web Wowser quite a bit, so I want to customize the search engine. When in EWW: ~M-x customize-mode~ &rarr; /Eww Search Prefix/ &rarr; ~https://html.duckduckgo.com/html?q=~

"/usr/share/applications/firefox.desktop"

I like having the day, date, and time displayed in my modeline.

#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t)
(display-time-mode 1)
#+END_SRC

For the time being, simply use one of the default color themes. Can use ~M+x customize-theme~ to change themes.

#+BEGIN_SRC emacs-lisp
(load-theme 'wheatgrass)
#+END_SRC

I like to use the ~menu-bar-mode~, ~menu-bar-open~ (~F10~) when I forget commands. But the default colors don't really work. They are in two different places:

1. ~M-x customize-face RET menu RET~ to set the menu bar itself
2. Use TTY settings to set the colors of the pull downs themselves:
    - With ~customize-face~: ~tty-menu-disabled-face~, ~tty-menu-enabled-face~, ~tty-menu-selected-face~
    - Or in Lisp: ~(set-face-attribute 'tty-menu-enabled-face  nil :background "black" :foreground "white")~

* Editing Helpers

Enable the upcase-region function. I still have no idea why this is disabled by default.

#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
#+END_SRC

Whenever we visit a buffer that has no active edits, but the file has changed on disk, automatically reload it.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Whenever the cursor is on a paren, highlight the matching paren.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

[[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Mark][The Mark and the Region]]

#+BEGIN_SRC emacs-lisp
(transient-mark-mode 1)
(delete-selection-mode t) ;; delete the selection with a keypress
#+END_SRC

** [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Indentation][Indentation]]

#+BEGIN_SRC emacs-lisp
;; keep my code tidy
(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)
;; ?? (setq-default tab-width 8) ;; but maintain correct appearance
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Programming

** SX                                                           :considering:

Stack Exchange

** Settings

Tell ~python-mode~ to use Python 3

#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python3")
#+END_SRC

** Literate Programming in org-babel

Documentation: [[https://www.orgmode.org/worg/org-contrib/babel/languages/ob-doc-clojure.html][Clojure in Org Mode Babel]]

Stop Emacs asking for confirmation to evaluate:

#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC

Load ~ob-shell~ for literate programming in org-babel. ~emacs-lisp~ already works by default.

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '((emacs-lisp . t)
                             (clojure . t)
                             (python . t)
                             (shell . t)))
#+END_SRC

Python example:

#+BEGIN_SRC python :tangle no
return 3 + 7
#+END_SRC

#+RESULTS:
: 10

* Fill Paragraphs

[[https://www.emacswiki.org/emacs/UnfillParagraph ][Unfill Paragraph]] by Stefan Monnier <foo at acm.org>. It is the opposite of ~fill-paragraph~.

#+BEGIN_SRC emacs-lisp
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))
#+END_SRC

Handy key definition for ~unfill-paragraph~.

#+BEGIN_SRC emacs-lisp
(define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC

* eMail

** Using mu-wizard                                                :installed:

Dependencies

1. [[https://github.com/cemkeylan/mu-wizard/][mu-wizard]]: shell script to setup mu4e for Emacs
2. [[https://www.passwordstore.org/#extensions][pass]] (via ~apt~) for passwords
3. isync (via ~apt~) for offline mail storage
    - see also [[http://isync.sourceforge.net/][isync main]], [[https://wiki.archlinux.org/title/Isync][isync on Arch Linux]]
    - ~mbsync -a~: update each folder
    - while isync is the project name, mbsync is the current executable name; this change was necessary because of massive changes in the user interface.
4. mu (install ~mu4e~ via ~apt~) (or maildir-utils depending on your distribution, see also [[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu/mu4e]])
5. msmtp (via ~apt~) for sending mails
6. [[https://xapian.org/][Xapian]] (install ~libxapian-dev~ via ~apt~) is an Open Source Search Engine Library
7. [[https://github.com/jwiegley/use-package][use-package]] (via MELPA)

Commands

1. ~muw add~
2. ~muw sync personal~ where ~personal~ is an account name
3. ~muw mu-init~ to setup database store
4. ~mu index~ to index for search (Xapian)

Lisp Code

#+BEGIN_SRC emacs-lisp
(load-file "~/.config/mu4e/mu4e-config.el")

(add-to-list 'load-path "~/.config/mu4e")
(require 'mu4e-config)

(use-package mu4e-config
  :after mu4e
  :load-path "~/.config/mu4e")

;; mu4e does not by default rename files when moving them to a new directory and this then causes problems for mbsync.
;; `Maildir error: duplicate UID xx`

(setq mu4e-change-filenames-when-moving t)
#+END_SRC

Run in Emacs with ~mu4e~.

#+BEGIN_SRC shell :results drawer
mu info
#+END_SRC

#+RESULTS:
:RESULTS:
database-path      : /home/schmudde/.cache/mu/xapian
messages in store  : 24753
schema-version     : 451
created            : Sun 23 May 2021 07:47:45 PM CDT
maildir            : /home/schmudde/.local/share/mail
:END:

** Other Approaches

- [[https://github.com/Ebert-Hanke/emacs#email-in-emacs][Guide to Guides]]
- [[https://github.com/munen/mu4e-views][mu4e Views]]
- [[http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/][Link to A Complete Guide to Email in Emacs using Mu and Mu4e]]
- [[https://emacs.stackexchange.com/questions/12927/reading-and-writing-email-with-emacs][Stack Exchange overview]]
- [[https://chrisdone.com/posts/emacs-mail/][Emacs, Notmuch and Offlineimap]]

* Resources

TIP: [[https://orgmode.org/manual/Handling-Links.html][Handling Links]] in org-mode: ~org-toggle-link-display~: ~C-c C-l~ (with point on existing link)

- Inspiring literate GNU Emacs Configuration File
    - Seth Morabito's literate [[https://github.com/sethm/emacs-files/blob/master/configuration.org][GNU Emacs Configuration File]]
    - Alain M. Lafon's [[https://github.com/munen/emacs.d][Play Emacs Like an Instrument]]
    - Colin McLear's [[https://github.com/mclear-tools/dotemacs][Emacs for Academic Writing]], [[https://github.com/mclear-tools/dotemacs][post]]
    - Collections of configs
        - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
        - [[https://github.com/caisah/emacs.dz][Starter packs/defaults]]
- Inspiring Blog Posts
    - [[https://dev.to/matheusemm/simple-emacs-configuration-for-clojure-development-11i3][Simple Emacs configuration for Clojure development]]
    - [[https://karthinks.com/software/batteries-included-with-emacs/][Batteries Included With Emacs]]
- [[https://github.com/alphapapa/unpackaged.el][Unpackaged]]: A collection of useful Emacs Lisp code that isn’t substantial enough to be packaged.
- Org Mode Babel: [[https://github.com/grettke/help/blob/master/Org-Mode_Fundamentals.md][tangling/evaluating/weaving]]

* Miscellaneous Notes

I find printing a default message in the empty scratch buffer opened at startup occasionally useful for testing.

~(setq initial-scratch-message "Welcome in Emacs")~

[[https://github.com/github/markup][Github markup]] uses [[https://github.com/wallyqs/org-ruby][org-ruby]] to convert org-mode to HTML. It supports footnotes and some custom markup.

[[file:https://readme-jokes.vercel.app/api]]

TODO: [[https://www.emacswiki.org/emacs/InfoPath][Set info-path for org-mode documentation]] (currently broken)
